import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { OneUptimeAPIClient } from "./APIClient.js";

export class MCPService {
  private apiClient: OneUptimeAPIClient;

  public constructor() {
    this.apiClient = new OneUptimeAPIClient();
  }

  public async addToolsToServer(server: McpServer): Promise<void> {
    // Register all tools
    server.tool(
      "listUser",
      "Endpoint to list all User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for User. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for User. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "email": true,
                              "newUnverifiedTemporaryEmail": true,
                              "companyName": true,
                              "jobRole": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for User. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listUser(args);
      }
    );

    server.tool(
      "countUser",
      "Endpoint to count User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for User. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countUser(args);
      }
    );

    server.tool(
      "listProbe",
      "Endpoint to list all Probe items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Probe. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Probe. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "key": true,
                              "name": true,
                              "description": true,
                              "connectionStatus": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Probe. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listProbe(args);
      }
    );

    server.tool(
      "countProbe",
      "Endpoint to count Probe items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Probe. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countProbe(args);
      }
    );

    server.tool(
      "createProbe",
      "Endpoint to create a new Probe",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Probe model. Create",
                        "example": {
                              "key": "Example Text",
                              "name": null,
                              "probeVersion": 1
                        },
                        "properties": {
                              "key": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe], Read: [Project Owner, Project Admin], Update: [Project Owner, Project Admin, Project Member, Edit Probe]",
                                    "example": "Example short text"
                              },
                              "name": {
                                    "type": "object",
                                    "description": "Name object",
                                    "example": {
                                          "_type": "Name",
                                          "value": "John Doe"
                                    }
                              },
                              "description": {
                                    "type": "object",
                                    "description": "Name object",
                                    "example": {
                                          "_type": "Name",
                                          "value": "John Doe"
                                    }
                              },
                              "probeVersion": {
                                    "type": "object",
                                    "description": "Version object",
                                    "example": {
                                          "_type": "Version",
                                          "value": "1.0.0"
                                    }
                              },
                              "lastAlive": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "iconFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldAutoEnableProbeOnNewMonitors": {
                                    "type": "boolean",
                                    "description": "Auto Enable Probe on New Monitors. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        },
                        "required": [
                              "key",
                              "name",
                              "probeVersion"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createProbe(args);
      }
    );

    server.tool(
      "getProbe",
      "Endpoint to retrieve a single Probe by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Probe. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "key": true,
                              "name": true,
                              "description": true,
                              "connectionStatus": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getProbe(args);
      }
    );

    server.tool(
      "updateProbe",
      "Endpoint to update an existing Probe",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Probe model. Update",
                        "example": {
                              "key": "Example Text",
                              "name": null,
                              "probeVersion": 1,
                              "shouldAutoEnableProbeOnNewMonitors": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "key": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Probe], Read: [Project Owner, Project Admin], Update: [Project Owner, Project Admin, Project Member, Edit Probe]",
                                    "example": "Example short text"
                              },
                              "name": {
                                    "type": "object",
                                    "description": "Name object",
                                    "example": {
                                          "_type": "Name",
                                          "value": "John Doe"
                                    }
                              },
                              "description": {
                                    "type": "object",
                                    "description": "Name object",
                                    "example": {
                                          "_type": "Name",
                                          "value": "John Doe"
                                    }
                              },
                              "probeVersion": {
                                    "type": "object",
                                    "description": "Version object",
                                    "example": {
                                          "_type": "Version",
                                          "value": "1.0.0"
                                    }
                              },
                              "iconFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldAutoEnableProbeOnNewMonitors": {
                                    "type": "boolean",
                                    "description": "Auto Enable Probe on New Monitors. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateProbe(args);
      }
    );

    server.tool(
      "deleteProbe",
      "Endpoint to delete a Probe",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteProbe(args);
      }
    );

    server.tool(
      "listProject",
      "Endpoint to list all Project items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Project. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Project. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "paymentProviderPlanId": true,
                              "paymentProviderSubscriptionId": true,
                              "paymentProviderMeteredSubscriptionId": true,
                              "paymentProviderCustomerId": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Project. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listProject(args);
      }
    );

    server.tool(
      "countProject",
      "Endpoint to count Project items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Project. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countProject(args);
      }
    );

    server.tool(
      "createProject",
      "Endpoint to create a new Project",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Project model. Create",
                        "example": {
                              "name": "Example Text",
                              "slug": "example-slug"
                        },
                        "properties": {
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
                                    "example": "Example short text"
                              },
                              "paymentProviderPlanId": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Logged in User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner]",
                                    "example": "Example short text"
                              },
                              "paymentProviderPromoCode": {
                                    "type": "string",
                                    "description": "Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isFeatureFlagMonitorGroupsEnabled": {
                                    "type": "boolean",
                                    "description": "Is Feature Flag Monitor Groups Enabled. Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
                                    "example": true
                              },
                              "activeMonitorsLimit": {
                                    "type": "number",
                                    "description": "Permissions - Create: [User], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": 42
                              },
                              "seatLimit": {
                                    "type": "number",
                                    "description": "Permissions - Create: [User], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": 42
                              },
                              "utmContent": {
                                    "type": "string",
                                    "description": "Permissions - Create: [User], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createProject(args);
      }
    );

    server.tool(
      "getProject",
      "Endpoint to retrieve a single Project by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Project to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Project. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "paymentProviderPlanId": true,
                              "paymentProviderSubscriptionId": true,
                              "paymentProviderMeteredSubscriptionId": true,
                              "paymentProviderCustomerId": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getProject(args);
      }
    );

    server.tool(
      "updateProject",
      "Endpoint to update an existing Project",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Project to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Project model. Update",
                        "example": {
                              "name": "Example Text",
                              "requireSsoForLogin": true,
                              "autoRechargeSmsOrCallByBalanceInUSD": 42,
                              "autoRechargeSmsOrCallWhenCurrentBalanceFallsInUSD": 42,
                              "enableSmsNotifications": true,
                              "enableCallNotifications": true,
                              "enableAutoRechargeSmsOrCallBalance": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
                                    "example": "Example short text"
                              },
                              "paymentProviderPlanId": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Logged in User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner]",
                                    "example": "Example short text"
                              },
                              "isFeatureFlagMonitorGroupsEnabled": {
                                    "type": "boolean",
                                    "description": "Is Feature Flag Monitor Groups Enabled. Permissions - Create: [User], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing, Edit Project]",
                                    "example": true
                              },
                              "requireSsoForLogin": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Project Admin, Edit Project]",
                                    "example": true
                              },
                              "autoRechargeSmsOrCallByBalanceInUSD": {
                                    "type": "number",
                                    "description": "Auto recharge amount in USD for SMS or Call. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [Project Owner, Manage Billing]",
                                    "example": 42
                              },
                              "autoRechargeSmsOrCallWhenCurrentBalanceFallsInUSD": {
                                    "type": "number",
                                    "description": "Auto recharge is triggered when current balance falls to this amount in USD for SMS or Call. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project], Update: [Project Owner, Manage Billing]",
                                    "example": 42
                              },
                              "enableSmsNotifications": {
                                    "type": "boolean",
                                    "description": "Enable SMS notifications for this project.. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
                                    "example": true
                              },
                              "enableCallNotifications": {
                                    "type": "boolean",
                                    "description": "Enable call notifications for this project.. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
                                    "example": true
                              },
                              "enableAutoRechargeSmsOrCallBalance": {
                                    "type": "boolean",
                                    "description": "Enable auto recharge SMS or Call balance for this project.. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Project, Project User], Update: [Project Owner, Manage Billing]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateProject(args);
      }
    );

    server.tool(
      "deleteProject",
      "Endpoint to delete a Project",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Project to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteProject(args);
      }
    );

    server.tool(
      "listTeam",
      "Endpoint to list all Team items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Team. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Team. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Team. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTeam(args);
      }
    );

    server.tool(
      "countTeam",
      "Endpoint to count Team items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Team. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTeam(args);
      }
    );

    server.tool(
      "createTeam",
      "Endpoint to create a new Team",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Team model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTeam(args);
      }
    );

    server.tool(
      "getTeam",
      "Endpoint to retrieve a single Team by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Team. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTeam(args);
      }
    );

    server.tool(
      "updateTeam",
      "Endpoint to update an existing Team",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Team model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Team], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTeam(args);
      }
    );

    server.tool(
      "deleteTeam",
      "Endpoint to delete a Team",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTeam(args);
      }
    );

    server.tool(
      "listTeamMember",
      "Endpoint to list all Team Member items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TeamMember. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TeamMember. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TeamMember. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTeamMember(args);
      }
    );

    server.tool(
      "countTeamMember",
      "Endpoint to count Team Member items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TeamMember. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTeamMember(args);
      }
    );

    server.tool(
      "createTeamMember",
      "Endpoint to create a new Team Member",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TeamMember model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "hasAcceptedInvitation": {
                                    "type": "boolean",
                                    "description": "Has this team member accepted invitation. Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Project Member, Read Teams, Logged in User], Update: [Logged in User]",
                                    "example": true
                              },
                              "invitationAcceptedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "userId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTeamMember(args);
      }
    );

    server.tool(
      "getTeamMember",
      "Endpoint to retrieve a single Team Member by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Member to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TeamMember. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTeamMember(args);
      }
    );

    server.tool(
      "updateTeamMember",
      "Endpoint to update an existing Team Member",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Member to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TeamMember model. Update",
                        "example": {
                              "hasAcceptedInvitation": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "hasAcceptedInvitation": {
                                    "type": "boolean",
                                    "description": "Has this team member accepted invitation. Permissions - Create: [Project Owner, Project Admin, Create Team, Invite New Members], Read: [Project Owner, Project Admin, Project Member, Read Teams, Logged in User], Update: [Logged in User]",
                                    "example": true
                              },
                              "invitationAcceptedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTeamMember(args);
      }
    );

    server.tool(
      "deleteTeamMember",
      "Endpoint to delete a Team Member",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Member to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTeamMember(args);
      }
    );

    server.tool(
      "listTeamPermission",
      "Endpoint to list all Team Permission items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TeamPermission. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TeamPermission. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TeamPermission. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTeamPermission(args);
      }
    );

    server.tool(
      "countTeamPermission",
      "Endpoint to count Team Permission items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TeamPermission. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTeamPermission(args);
      }
    );

    server.tool(
      "createTeamPermission",
      "Endpoint to create a new Team Permission",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TeamPermission model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "permission": "read"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "permission": {
                                    "type": "object",
                                    "description": "Permission. You can find list of permissions on the Permissions page.. Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Invite New Members, Edit Team Permissions, Edit Team]",
                                    "example": {
                                          "read": true,
                                          "write": false,
                                          "delete": false
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this permission is scoped at.. Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "isBlockPermission": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTeamPermission(args);
      }
    );

    server.tool(
      "getTeamPermission",
      "Endpoint to retrieve a single Team Permission by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Permission to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TeamPermission. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTeamPermission(args);
      }
    );

    server.tool(
      "updateTeamPermission",
      "Endpoint to update an existing Team Permission",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Permission to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TeamPermission model. Update",
                        "example": {
                              "permission": "read"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "permission": {
                                    "type": "object",
                                    "description": "Permission. You can find list of permissions on the Permissions page.. Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Invite New Members, Edit Team Permissions, Edit Team]",
                                    "example": {
                                          "read": true,
                                          "write": false,
                                          "delete": false
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this permission is scoped at.. Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "isBlockPermission": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Team, Edit Team Permissions], Read: [Project Owner, Project Admin, Project Member, Read Teams], Update: [Project Owner, Project Admin, Edit Team Permissions, Edit Team]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTeamPermission(args);
      }
    );

    server.tool(
      "deleteTeamPermission",
      "Endpoint to delete a Team Permission",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team Permission to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTeamPermission(args);
      }
    );

    server.tool(
      "listApiKey",
      "Endpoint to list all API Key items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ApiKey. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ApiKey. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ApiKey. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listApiKey(args);
      }
    );

    server.tool(
      "countApiKey",
      "Endpoint to count API Key items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ApiKey. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countApiKey(args);
      }
    );

    server.tool(
      "createApiKey",
      "Endpoint to create a new API Key",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ApiKey model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "expiresAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "expiresAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "name",
                              "expiresAt"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createApiKey(args);
      }
    );

    server.tool(
      "getApiKey",
      "Endpoint to retrieve a single API Key by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ApiKey. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getApiKey(args);
      }
    );

    server.tool(
      "updateApiKey",
      "Endpoint to update an existing API Key",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ApiKey model. Update",
                        "example": {
                              "name": "Example Text",
                              "expiresAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create API Key], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "expiresAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateApiKey(args);
      }
    );

    server.tool(
      "deleteApiKey",
      "Endpoint to delete a API Key",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteApiKey(args);
      }
    );

    server.tool(
      "listLabel",
      "Endpoint to list all Label items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Label. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Label. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Label. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listLabel(args);
      }
    );

    server.tool(
      "countLabel",
      "Endpoint to count Label items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Label. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countLabel(args);
      }
    );

    server.tool(
      "createLabel",
      "Endpoint to create a new Label",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Label model. Create",
                        "example": {
                              "name": "Example Text",
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
                                    "example": "Example short text"
                              },
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createLabel(args);
      }
    );

    server.tool(
      "getLabel",
      "Endpoint to retrieve a single Label by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Label to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Label. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getLabel(args);
      }
    );

    server.tool(
      "updateLabel",
      "Endpoint to update an existing Label",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Label to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Label model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Label], Read: [Project Owner, Project Admin, Project Member, Read Label], Update: [Project Owner, Project Admin, Edit Label]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateLabel(args);
      }
    );

    server.tool(
      "deleteLabel",
      "Endpoint to delete a Label",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Label to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteLabel(args);
      }
    );

    server.tool(
      "listApiKeyPermission",
      "Endpoint to list all API Key Permission items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ApiKeyPermission. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ApiKeyPermission. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ApiKeyPermission. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listApiKeyPermission(args);
      }
    );

    server.tool(
      "countApiKeyPermission",
      "Endpoint to count API Key Permission items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ApiKeyPermission. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countApiKeyPermission(args);
      }
    );

    server.tool(
      "createApiKeyPermission",
      "Endpoint to create a new API Key Permission",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ApiKeyPermission model. Create",
                        "example": {
                              "apiKeyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "permission": "read"
                        },
                        "properties": {
                              "apiKeyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "permission": {
                                    "type": "object",
                                    "description": "Permission. You can find list of permissions on the Permissions page.. Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": {
                                          "read": true,
                                          "write": false,
                                          "delete": false
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this permission is scoped at.. Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "isBlockPermission": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": true
                              }
                        },
                        "required": [
                              "apiKeyId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createApiKeyPermission(args);
      }
    );

    server.tool(
      "getApiKeyPermission",
      "Endpoint to retrieve a single API Key Permission by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key Permission to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ApiKeyPermission. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getApiKeyPermission(args);
      }
    );

    server.tool(
      "updateApiKeyPermission",
      "Endpoint to update an existing API Key Permission",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key Permission to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ApiKeyPermission model. Update",
                        "example": {
                              "permission": "read"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "permission": {
                                    "type": "object",
                                    "description": "Permission. You can find list of permissions on the Permissions page.. Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": {
                                          "read": true,
                                          "write": false,
                                          "delete": false
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this permission is scoped at.. Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "isBlockPermission": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create API Key, Edit API Key Permissions], Read: [Project Owner, Project Admin, Read API Key], Update: [Project Owner, Project Admin, Edit API Key Permissions, Edit API Key]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateApiKeyPermission(args);
      }
    );

    server.tool(
      "deleteApiKeyPermission",
      "Endpoint to delete a API Key Permission",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the API Key Permission to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteApiKeyPermission(args);
      }
    );

    server.tool(
      "listStatusPage",
      "Endpoint to list all Status Page items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPage. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPage. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "pageTitle": true,
                              "copyrightText": true,
                              "overallUptimePercentPrecision": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPage. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPage(args);
      }
    );

    server.tool(
      "countStatusPage",
      "Endpoint to count Status Page items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPage. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPage(args);
      }
    );

    server.tool(
      "createStatusPage",
      "Endpoint to create a new Status Page",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPage model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "pageTitle": {
                                    "type": "string",
                                    "description": "Title of your Status Page. This is used for SEO.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "pageDescription": {
                                    "type": "string",
                                    "description": "Description of your Status Page. This is used for SEO.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "faviconFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "logoFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "coverImageFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "headerHTML": {
                                    "type": "string",
                                    "description": "Status Page Custom HTML Header. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "<div><h1>Title</h1><p>Content</p></div>"
                              },
                              "footerHTML": {
                                    "type": "string",
                                    "description": "Status Page Custom HTML Footer. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "<div><h1>Title</h1><p>Content</p></div>"
                              },
                              "customCSS": {
                                    "type": "string",
                                    "description": "Status Page Custom CSS Header. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "body { color: #333; margin: 0; }"
                              },
                              "customJavaScript": {
                                    "type": "string",
                                    "description": "Status Page Custom JavaScript. This runs when the status page is loaded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "function example() { return true; }"
                              },
                              "isPublicStatusPage": {
                                    "type": "boolean",
                                    "description": "Is this status page public?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showIncidentLabelsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Incident Labels on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showScheduledEventLabelsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Scheduled Event Labels on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSubscribers": {
                                    "type": "boolean",
                                    "description": "Can subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableEmailSubscribers": {
                                    "type": "boolean",
                                    "description": "Can email subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "allowSubscribersToChooseResources": {
                                    "type": "boolean",
                                    "description": "Can subscribers choose which resources to subscribe to?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "allowSubscribersToChooseEventTypes": {
                                    "type": "boolean",
                                    "description": "Can subscribers choose which event type like Announcements, Incidents, Scheduled Events to subscribe to?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSmsSubscribers": {
                                    "type": "boolean",
                                    "description": "Can SMS subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSlackSubscribers": {
                                    "type": "boolean",
                                    "description": "Can Slack subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "copyrightText": {
                                    "type": "string",
                                    "description": "Copyright Text. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "requireSsoForLogin": {
                                    "type": "boolean",
                                    "description": "Should SSO be required to login to Private Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page, Public], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "smtpConfigId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "callSmsConfigId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "showIncidentHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of incident history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showAnnouncementHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of announcement history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showScheduledEventHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of scheduled event history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "overviewPageDescription": {
                                    "type": "string",
                                    "description": "Overview Page description for your status page. This is a markdown field.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "hidePoweredByOneUptimeBranding": {
                                    "type": "boolean",
                                    "description": "Hide Powered By OneUptime Branding?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "defaultBarColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "downtimeMonitorStatuses": {
                                    "type": "array",
                                    "description": "List of monitors statuses that are considered as \"down\" for this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "subscriberTimezones": {
                                    "type": "object",
                                    "description": "Timezones of subscribers to this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isReportEnabled": {
                                    "type": "boolean",
                                    "description": "Is Report Enabled for this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "reportStartDateTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "reportRecurringInterval": {
                                    "type": "object",
                                    "description": "How often would you like to send the report?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendNextReportBy": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "reportDataInDays": {
                                    "type": "number",
                                    "description": "How many days of data should be included in the report?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showOverallUptimePercentOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Overall Uptime Percent on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "overallUptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Overall Precision of uptime percent for this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "subscriberEmailNotificationFooterText": {
                                    "type": "string",
                                    "description": "Text to send to subscribers in the footer of the email.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "showIncidentsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Incidents on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showAnnouncementsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Announcements on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showScheduledMaintenanceEventsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Scheduled Maintenance Events on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showSubscriberPageOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Subscriber Page on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "ipWhitelist": {
                                    "type": "string",
                                    "description": "IP Whitelist for this Status Page. One IP per line. Only used if the status page is private.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPage(args);
      }
    );

    server.tool(
      "getStatusPage",
      "Endpoint to retrieve a single Status Page by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPage. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "pageTitle": true,
                              "copyrightText": true,
                              "overallUptimePercentPrecision": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPage(args);
      }
    );

    server.tool(
      "updateStatusPage",
      "Endpoint to update an existing Status Page",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPage model. Update",
                        "example": {
                              "name": "Example Text",
                              "requireSsoForLogin": true,
                              "showIncidentHistoryInDays": 42,
                              "showAnnouncementHistoryInDays": 42,
                              "showScheduledEventHistoryInDays": 42
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "pageTitle": {
                                    "type": "string",
                                    "description": "Title of your Status Page. This is used for SEO.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "pageDescription": {
                                    "type": "string",
                                    "description": "Description of your Status Page. This is used for SEO.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "faviconFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "logoFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "coverImageFileId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "headerHTML": {
                                    "type": "string",
                                    "description": "Status Page Custom HTML Header. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "<div><h1>Title</h1><p>Content</p></div>"
                              },
                              "footerHTML": {
                                    "type": "string",
                                    "description": "Status Page Custom HTML Footer. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "<div><h1>Title</h1><p>Content</p></div>"
                              },
                              "customCSS": {
                                    "type": "string",
                                    "description": "Status Page Custom CSS Header. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "body { color: #333; margin: 0; }"
                              },
                              "customJavaScript": {
                                    "type": "string",
                                    "description": "Status Page Custom JavaScript. This runs when the status page is loaded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "function example() { return true; }"
                              },
                              "isPublicStatusPage": {
                                    "type": "boolean",
                                    "description": "Is this status page public?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showIncidentLabelsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Incident Labels on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showScheduledEventLabelsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Scheduled Event Labels on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSubscribers": {
                                    "type": "boolean",
                                    "description": "Can subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableEmailSubscribers": {
                                    "type": "boolean",
                                    "description": "Can email subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "allowSubscribersToChooseResources": {
                                    "type": "boolean",
                                    "description": "Can subscribers choose which resources to subscribe to?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "allowSubscribersToChooseEventTypes": {
                                    "type": "boolean",
                                    "description": "Can subscribers choose which event type like Announcements, Incidents, Scheduled Events to subscribe to?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSmsSubscribers": {
                                    "type": "boolean",
                                    "description": "Can SMS subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "enableSlackSubscribers": {
                                    "type": "boolean",
                                    "description": "Can Slack subscribers subscribe to this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "copyrightText": {
                                    "type": "string",
                                    "description": "Copyright Text. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "requireSsoForLogin": {
                                    "type": "boolean",
                                    "description": "Should SSO be required to login to Private Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page, Public], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "smtpConfigId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "callSmsConfigId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "showIncidentHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of incident history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showAnnouncementHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of announcement history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showScheduledEventHistoryInDays": {
                                    "type": "number",
                                    "description": "How many days of scheduled event history should be shown on the status page (in days)?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "overviewPageDescription": {
                                    "type": "string",
                                    "description": "Overview Page description for your status page. This is a markdown field.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "hidePoweredByOneUptimeBranding": {
                                    "type": "boolean",
                                    "description": "Hide Powered By OneUptime Branding?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "defaultBarColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "downtimeMonitorStatuses": {
                                    "type": "array",
                                    "description": "List of monitors statuses that are considered as \"down\" for this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "subscriberTimezones": {
                                    "type": "object",
                                    "description": "Timezones of subscribers to this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isReportEnabled": {
                                    "type": "boolean",
                                    "description": "Is Report Enabled for this Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "reportStartDateTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "reportRecurringInterval": {
                                    "type": "object",
                                    "description": "How often would you like to send the report?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendNextReportBy": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "reportDataInDays": {
                                    "type": "number",
                                    "description": "How many days of data should be included in the report?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": 42
                              },
                              "showOverallUptimePercentOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Overall Uptime Percent on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "overallUptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Overall Precision of uptime percent for this status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "Example short text"
                              },
                              "subscriberEmailNotificationFooterText": {
                                    "type": "string",
                                    "description": "Text to send to subscribers in the footer of the email.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "showIncidentsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Incidents on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showAnnouncementsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Announcements on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showScheduledMaintenanceEventsOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Scheduled Maintenance Events on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "showSubscriberPageOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Show Subscriber Page on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": true
                              },
                              "ipWhitelist": {
                                    "type": "string",
                                    "description": "IP Whitelist for this Status Page. One IP per line. Only used if the status page is private.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page], Read: [Project Owner, Project Admin, Project Member, Read Status Page], Update: [Project Owner, Project Admin, Project Member, Edit Status Page]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPage(args);
      }
    );

    server.tool(
      "deleteStatusPage",
      "Endpoint to delete a Status Page",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPage(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicy",
      "Endpoint to list all On-Call Policy items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicy. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicy. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicy. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicy",
      "Endpoint to count On-Call Policy items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicy. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicy",
      "Endpoint to create a new On-Call Policy",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicy model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "slug": "example-slug"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": "Example short text"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "repeatPolicyIfNoOneAcknowledges": {
                                    "type": "boolean",
                                    "description": "Repeat the policy if no one acknowledges the alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": true
                              },
                              "repeatPolicyIfNoOneAcknowledgesNoOfTimes": {
                                    "type": "boolean",
                                    "description": "Repeat the policy X number of times if no one acknowledges the alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicy",
      "Endpoint to retrieve a single On-Call Policy by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicy. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicy",
      "Endpoint to update an existing On-Call Policy",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicy model. Update",
                        "example": {
                              "name": "Example Text",
                              "repeatPolicyIfNoOneAcknowledges": true,
                              "repeatPolicyIfNoOneAcknowledgesNoOfTimes": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": "Example short text"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "repeatPolicyIfNoOneAcknowledges": {
                                    "type": "boolean",
                                    "description": "Repeat the policy if no one acknowledges the alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": true
                              },
                              "repeatPolicyIfNoOneAcknowledgesNoOfTimes": {
                                    "type": "boolean",
                                    "description": "Repeat the policy X number of times if no one acknowledges the alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicy",
      "Endpoint to delete a On-Call Policy",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicy(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyCustomField",
      "Endpoint to list all On-Call Policy Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyCustomField",
      "Endpoint to count On-Call Policy Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyCustomField",
      "Endpoint to create a new On-Call Policy Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyCustomField",
      "Endpoint to retrieve a single On-Call Policy Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyCustomField",
      "Endpoint to update an existing On-Call Policy Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create On-Call Policy Custom Field], Read: [Project Owner, Project Admin, Project Member, Read On-Call Policy Custom Field], Update: [Project Owner, Project Admin, Edit On-Call Policy Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyCustomField",
      "Endpoint to delete a On-Call Policy Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyCustomField(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyEscalationRule",
      "Endpoint to list all Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyEscalationRule. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyEscalationRule",
      "Endpoint to count Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyEscalationRule",
      "Endpoint to create a new Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyEscalationRule model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "escalateAfterInMinutes": {
                                    "type": "number",
                                    "description": "How long should we wait before we execute the next escalation rule?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": 42
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order of this rule. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyEscalationRule",
      "Endpoint to retrieve a single Escalation Rule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Escalation Rule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyEscalationRule",
      "Endpoint to update an existing Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Escalation Rule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyEscalationRule model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "escalateAfterInMinutes": {
                                    "type": "number",
                                    "description": "How long should we wait before we execute the next escalation rule?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": 42
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order of this rule. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Escalation Rule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Escalation Rule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Escalation Rule]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyEscalationRule",
      "Endpoint to delete a Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Escalation Rule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyEscalationRule(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to list all Team On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyEscalationRuleTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to count Team On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to create a new Team On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyEscalationRuleTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyEscalationRuleId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyEscalationRuleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "onCallDutyPolicyEscalationRuleId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to retrieve a single Team On-Call Duty Escalation Rule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team On-Call Duty Escalation Rule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to update an existing Team On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team On-Call Duty Escalation Rule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyEscalationRuleTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyEscalationRuleTeam",
      "Endpoint to delete a Team On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Team On-Call Duty Escalation Rule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyEscalationRuleTeam(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to list all User's On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyEscalationRuleUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to count User's On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to create a new User's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyEscalationRuleUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyEscalationRuleId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyEscalationRuleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "onCallDutyPolicyEscalationRuleId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to retrieve a single User's On-Call Duty Escalation Rule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User's On-Call Duty Escalation Rule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to update an existing User's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User's On-Call Duty Escalation Rule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyEscalationRuleUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyEscalationRuleUser",
      "Endpoint to delete a User's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User's On-Call Duty Escalation Rule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyEscalationRuleUser(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyExecutionLog",
      "Endpoint to list all On-Call Duty Execution Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyExecutionLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyExecutionLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true,
                              "userNotificationEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyExecutionLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyExecutionLog(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyExecutionLog",
      "Endpoint to count On-Call Duty Execution Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyExecutionLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyExecutionLog(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyExecutionLog",
      "Endpoint to create a new On-Call Duty Execution Log",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyExecutionLog model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "status": "Example Text",
                              "statusMessage": "This is an example of longer text content that provides detailed information.",
                              "userNotificationEventType": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "triggeredByIncidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "triggeredByAlertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "status": {
                                    "type": "string",
                                    "description": "Status of this execution. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "statusMessage": {
                                    "type": "string",
                                    "description": "Status message of this execution. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "userNotificationEventType": {
                                    "type": "string",
                                    "description": "Type of event that triggered this on-call duty policy.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Execution Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "acknowledgedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "acknowledgedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "acknowledgedByTeamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "lastExecutedEscalationRuleOrder": {
                                    "type": "number",
                                    "description": "Which escalation rule was executed?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": 42
                              },
                              "lastEscalationRuleExecutedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "lastExecutedEscalationRuleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "executeNextEscalationRuleInMinutes": {
                                    "type": "number",
                                    "description": "How many minutes should we wait before executing the next escalation rule?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": 42
                              },
                              "onCallPolicyExecutionRepeatCount": {
                                    "type": "number",
                                    "description": "How many times did we execute this on-call policy?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Execution Log], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": 42
                              },
                              "triggeredByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "status",
                              "statusMessage",
                              "userNotificationEventType"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyExecutionLog(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyExecutionLog",
      "Endpoint to retrieve a single On-Call Duty Execution Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Duty Execution Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyExecutionLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true,
                              "userNotificationEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyExecutionLog(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyExecutionLogTimeline",
      "Endpoint to list all On-Call Duty Execution Log Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyExecutionLogTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyExecutionLogTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "userNotificationEventType": true,
                              "status": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyExecutionLogTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyExecutionLogTimeline(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyExecutionLogTimeline",
      "Endpoint to count On-Call Duty Execution Log Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyExecutionLogTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyExecutionLogTimeline(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyExecutionLogTimeline",
      "Endpoint to retrieve a single On-Call Duty Execution Log Timeline by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Duty Execution Log Timeline to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyExecutionLogTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "userNotificationEventType": true,
                              "status": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyExecutionLogTimeline(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyUserOverride",
      "Endpoint to list all User Override items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyUserOverride. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyUserOverride. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyUserOverride. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyUserOverride",
      "Endpoint to count User Override items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyUserOverride. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyUserOverride",
      "Endpoint to create a new User Override",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyUserOverride model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "overrideUserId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "routeAlertsToUserId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "endsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "overrideUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "routeAlertsToUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "overrideUserId",
                              "routeAlertsToUserId",
                              "startsAt",
                              "endsAt"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyUserOverride",
      "Endpoint to retrieve a single User Override by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User Override to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyUserOverride. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyUserOverride",
      "Endpoint to update an existing User Override",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User Override to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyUserOverride model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyUserOverride",
      "Endpoint to delete a User Override",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the User Override to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyUserOverride(args);
      }
    );

    server.tool(
      "listMonitor",
      "Endpoint to list all Monitor items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Monitor. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Monitor. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "monitoringInterval": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Monitor. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitor(args);
      }
    );

    server.tool(
      "countMonitor",
      "Endpoint to count Monitor items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Monitor. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitor(args);
      }
    );

    server.tool(
      "createMonitor",
      "Endpoint to create a new Monitor",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Monitor model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "monitorType": null
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name for this monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "monitorType": {
                                    "type": "string",
                                    "description": "What is the type of this monitor? Website? API? etc.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
                                    "example": "HTTP"
                              },
                              "currentMonitorStatusId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorSteps": {
                                    "type": "object",
                                    "description": "MonitorSteps object",
                                    "example": {
                                          "_type": "MonitorSteps",
                                          "value": {
                                                "monitorStepsInstanceArray": []
                                          }
                                    }
                              },
                              "monitoringInterval": {
                                    "type": "string",
                                    "description": "How often would you like OneUptime to monitor this resource?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "Example short text"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "disableActiveMonitoring": {
                                    "type": "boolean",
                                    "description": "Disable active monitoring for this resource?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Create Monitor]",
                                    "example": true
                              },
                              "incomingRequestMonitorHeartbeatCheckedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "telemetryMonitorNextMonitorAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "telemetryMonitorLastMonitorAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "serverMonitorRequestReceivedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "incomingMonitorRequest": {
                                    "type": "object",
                                    "description": "Incoming Monitor Request for Incoming Request Monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "serverMonitorResponse": {
                                    "type": "object",
                                    "description": "Server Monitor Response for Server Monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name",
                              "monitorType"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitor(args);
      }
    );

    server.tool(
      "getMonitor",
      "Endpoint to retrieve a single Monitor by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Monitor. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "monitoringInterval": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitor(args);
      }
    );

    server.tool(
      "updateMonitor",
      "Endpoint to update an existing Monitor",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Monitor model. Update",
                        "example": {
                              "name": "Example Text",
                              "currentMonitorStatusId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "disableActiveMonitoring": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name for this monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentMonitorStatusId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorSteps": {
                                    "type": "object",
                                    "description": "MonitorSteps object",
                                    "example": {
                                          "_type": "MonitorSteps",
                                          "value": {
                                                "monitorStepsInstanceArray": []
                                          }
                                    }
                              },
                              "monitoringInterval": {
                                    "type": "string",
                                    "description": "How often would you like OneUptime to monitor this resource?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": "Example short text"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Edit Monitor]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "disableActiveMonitoring": {
                                    "type": "boolean",
                                    "description": "Disable active monitoring for this resource?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor], Read: [Project Owner, Project Admin, Project Member, Read Monitor], Update: [Project Owner, Project Admin, Project Member, Create Monitor]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitor(args);
      }
    );

    server.tool(
      "deleteMonitor",
      "Endpoint to delete a Monitor",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitor(args);
      }
    );

    server.tool(
      "listMonitorSecret",
      "Endpoint to list all Monitor Secret items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorSecret. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorSecret. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorSecret. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorSecret(args);
      }
    );

    server.tool(
      "countMonitorSecret",
      "Endpoint to count Monitor Secret items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorSecret. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorSecret(args);
      }
    );

    server.tool(
      "createMonitorSecret",
      "Endpoint to create a new Monitor Secret",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorSecret model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "secretValue": {
                                    "type": "string",
                                    "description": "Secret value that you want to store in this object. This value will be encrypted and only accessible by the probe.. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [No access - you don't have permission for this operation], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors that can access this secret. Permissions - Create: [Project Owner, Project Admin, Read Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorSecret(args);
      }
    );

    server.tool(
      "getMonitorSecret",
      "Endpoint to retrieve a single Monitor Secret by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Secret to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorSecret. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorSecret(args);
      }
    );

    server.tool(
      "updateMonitorSecret",
      "Endpoint to update an existing Monitor Secret",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Secret to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorSecret model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "secretValue": {
                                    "type": "string",
                                    "description": "Secret value that you want to store in this object. This value will be encrypted and only accessible by the probe.. Permissions - Create: [Project Owner, Project Admin, Create Monitor Secret], Read: [No access - you don't have permission for this operation], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors that can access this secret. Permissions - Create: [Project Owner, Project Admin, Read Monitor Secret], Read: [Project Owner, Project Admin, Read Monitor Secret], Update: [Project Owner, Project Admin, Edit Monitor Secret]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorSecret(args);
      }
    );

    server.tool(
      "deleteMonitorSecret",
      "Endpoint to delete a Monitor Secret",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Secret to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorSecret(args);
      }
    );

    server.tool(
      "listMonitorStatus",
      "Endpoint to list all Monitor Status items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorStatus. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorStatus. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorStatus. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorStatus(args);
      }
    );

    server.tool(
      "countMonitorStatus",
      "Endpoint to count Monitor Status items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorStatus. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorStatus(args);
      }
    );

    server.tool(
      "createMonitorStatus",
      "Endpoint to create a new Monitor Status",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorStatus model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isOperationalState": {
                                    "type": "boolean",
                                    "description": "Is this monitor in operational state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": true
                              },
                              "isOfflineState": {
                                    "type": "boolean",
                                    "description": "Is this monitor in offline state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": true
                              },
                              "priority": {
                                    "type": "number",
                                    "description": "Order / Priority of this status. For example: Operational has priority 1, Degraded has 2, Offline has 3. Lower priority would mean bad state of the resource. . Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorStatus(args);
      }
    );

    server.tool(
      "getMonitorStatus",
      "Endpoint to retrieve a single Monitor Status by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorStatus. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorStatus(args);
      }
    );

    server.tool(
      "updateMonitorStatus",
      "Endpoint to update an existing Monitor Status",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorStatus model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isOperationalState": {
                                    "type": "boolean",
                                    "description": "Is this monitor in operational state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": true
                              },
                              "isOfflineState": {
                                    "type": "boolean",
                                    "description": "Is this monitor in offline state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": true
                              },
                              "priority": {
                                    "type": "number",
                                    "description": "Order / Priority of this status. For example: Operational has priority 1, Degraded has 2, Offline has 3. Lower priority would mean bad state of the resource. . Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Status]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorStatus(args);
      }
    );

    server.tool(
      "deleteMonitorStatus",
      "Endpoint to delete a Monitor Status",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorStatus(args);
      }
    );

    server.tool(
      "listMonitorCustomField",
      "Endpoint to list all Monitor Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorCustomField(args);
      }
    );

    server.tool(
      "countMonitorCustomField",
      "Endpoint to count Monitor Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorCustomField(args);
      }
    );

    server.tool(
      "createMonitorCustomField",
      "Endpoint to create a new Monitor Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorCustomField(args);
      }
    );

    server.tool(
      "getMonitorCustomField",
      "Endpoint to retrieve a single Monitor Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorCustomField(args);
      }
    );

    server.tool(
      "updateMonitorCustomField",
      "Endpoint to update an existing Monitor Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Monitor Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Monitor Custom Field], Update: [Project Owner, Project Admin, Edit Monitor Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorCustomField(args);
      }
    );

    server.tool(
      "deleteMonitorCustomField",
      "Endpoint to delete a Monitor Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorCustomField(args);
      }
    );

    server.tool(
      "listIncidentState",
      "Endpoint to list all Incident State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentState. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentState(args);
      }
    );

    server.tool(
      "countIncidentState",
      "Endpoint to count Incident State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentState(args);
      }
    );

    server.tool(
      "createIncidentState",
      "Endpoint to create a new Incident State",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentState model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isCreatedState": {
                                    "type": "boolean",
                                    "description": "Is it the created state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "isAcknowledgedState": {
                                    "type": "boolean",
                                    "description": "Is it the acknowledged state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is it the resolved state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": 10
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentState(args);
      }
    );

    server.tool(
      "getIncidentState",
      "Endpoint to retrieve a single Incident State by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentState(args);
      }
    );

    server.tool(
      "updateIncidentState",
      "Endpoint to update an existing Incident State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentState model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isCreatedState": {
                                    "type": "boolean",
                                    "description": "Is it the created state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "isAcknowledgedState": {
                                    "type": "boolean",
                                    "description": "Is it the acknowledged state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is it the resolved state of the incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State], Read: [Project Owner, Project Admin, Project Member, Read Incident State], Update: [Project Owner, Project Admin, Project Member, Edit Incident State]",
                                    "example": 10
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentState(args);
      }
    );

    server.tool(
      "deleteIncidentState",
      "Endpoint to delete a Incident State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentState(args);
      }
    );

    server.tool(
      "listIncident",
      "Endpoint to list all Incident items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Incident. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Incident. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Incident. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncident(args);
      }
    );

    server.tool(
      "countIncident",
      "Endpoint to count Incident items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Incident. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncident(args);
      }
    );

    server.tool(
      "createIncident",
      "Endpoint to create a new Incident",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Incident model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "This is an example of longer text content that provides detailed information.",
                              "incidentSeverityId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this incident. This is in markdown and will be visible on the status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors affected by this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this incident.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentIncidentStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnIncidentCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "remediationNotes": {
                                    "type": "string",
                                    "description": "Notes on how to remediate this incident. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "telemetryQuery": {
                                    "type": "object",
                                    "description": "Telemetry query for this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isVisibleOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Should this incident be visible on the status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": true
                              }
                        },
                        "required": [
                              "title",
                              "incidentSeverityId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncident(args);
      }
    );

    server.tool(
      "getIncident",
      "Endpoint to retrieve a single Incident by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Incident. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncident(args);
      }
    );

    server.tool(
      "updateIncident",
      "Endpoint to update an existing Incident",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Incident model. Update",
                        "example": {
                              "title": "This is an example of longer text content that provides detailed information.",
                              "currentIncidentStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentSeverityId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this incident. This is in markdown and will be visible on the status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors affected by this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this incident.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentIncidentStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this incident?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "remediationNotes": {
                                    "type": "string",
                                    "description": "Notes on how to remediate this incident. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "telemetryQuery": {
                                    "type": "object",
                                    "description": "Telemetry query for this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isVisibleOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Should this incident be visible on the status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncident(args);
      }
    );

    server.tool(
      "deleteIncident",
      "Endpoint to delete a Incident",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncident(args);
      }
    );

    server.tool(
      "listIncidentFeed",
      "Endpoint to list all Incident Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "incidentFeedEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentFeed. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentFeed(args);
      }
    );

    server.tool(
      "countIncidentFeed",
      "Endpoint to count Incident Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentFeed(args);
      }
    );

    server.tool(
      "createIncidentFeed",
      "Endpoint to create a new Incident Feed",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentFeed model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "feedInfoInMarkdown": null,
                              "incidentFeedEventType": "Example Text",
                              "displayColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "feedInfoInMarkdown": {
                                    "type": "string",
                                    "description": "Log of the entire incident state change in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "moreInformationInMarkdown": {
                                    "type": "string",
                                    "description": "More information in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "incidentFeedEventType": {
                                    "type": "string",
                                    "description": "Incident Feed Event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Feed], Read: [Project Owner, Project Admin, Project Member, Read Incident Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "displayColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "incidentId",
                              "feedInfoInMarkdown",
                              "incidentFeedEventType",
                              "displayColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentFeed(args);
      }
    );

    server.tool(
      "getIncidentFeed",
      "Endpoint to retrieve a single Incident Feed by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Feed to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "incidentFeedEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentFeed(args);
      }
    );

    server.tool(
      "listIncidentCustomField",
      "Endpoint to list all Incident Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentCustomField(args);
      }
    );

    server.tool(
      "countIncidentCustomField",
      "Endpoint to count Incident Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentCustomField(args);
      }
    );

    server.tool(
      "createIncidentCustomField",
      "Endpoint to create a new Incident Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentCustomField(args);
      }
    );

    server.tool(
      "getIncidentCustomField",
      "Endpoint to retrieve a single Incident Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentCustomField(args);
      }
    );

    server.tool(
      "updateIncidentCustomField",
      "Endpoint to update an existing Incident Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Incident Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Incident Custom Field], Update: [Project Owner, Project Admin, Edit Incident Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentCustomField(args);
      }
    );

    server.tool(
      "deleteIncidentCustomField",
      "Endpoint to delete a Incident Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentCustomField(args);
      }
    );

    server.tool(
      "listIncidentStateTimeline",
      "Endpoint to list all Incident State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentStateTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentStateTimeline(args);
      }
    );

    server.tool(
      "countIncidentStateTimeline",
      "Endpoint to count Incident State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentStateTimeline(args);
      }
    );

    server.tool(
      "createIncidentStateTimeline",
      "Endpoint to create a new Incident State Timeline",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentStateTimeline model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldStatusPageSubscribersBeNotified": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this state change?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this status change?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Incident State Timeline], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "incidentId",
                              "incidentStateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentStateTimeline(args);
      }
    );

    server.tool(
      "getIncidentStateTimeline",
      "Endpoint to retrieve a single Incident State Timeline by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State Timeline to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentStateTimeline(args);
      }
    );

    server.tool(
      "updateIncidentStateTimeline",
      "Endpoint to update an existing Incident State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State Timeline to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentStateTimeline model. Update",
                        "example": {
                              "incidentStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentStateTimeline(args);
      }
    );

    server.tool(
      "deleteIncidentStateTimeline",
      "Endpoint to delete a Incident State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident State Timeline to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentStateTimeline(args);
      }
    );

    server.tool(
      "listIncidentInternalNote",
      "Endpoint to list all Incident Internal Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentInternalNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentInternalNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentInternalNote. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentInternalNote(args);
      }
    );

    server.tool(
      "countIncidentInternalNote",
      "Endpoint to count Incident Internal Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentInternalNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentInternalNote(args);
      }
    );

    server.tool(
      "createIncidentInternalNote",
      "Endpoint to create a new Incident Internal Note",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentInternalNote model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Internal Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        },
                        "required": [
                              "incidentId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentInternalNote(args);
      }
    );

    server.tool(
      "getIncidentInternalNote",
      "Endpoint to retrieve a single Incident Internal Note by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Internal Note to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentInternalNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentInternalNote(args);
      }
    );

    server.tool(
      "updateIncidentInternalNote",
      "Endpoint to update an existing Incident Internal Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Internal Note to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentInternalNote model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Internal Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentInternalNote(args);
      }
    );

    server.tool(
      "deleteIncidentInternalNote",
      "Endpoint to delete a Incident Internal Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Internal Note to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentInternalNote(args);
      }
    );

    server.tool(
      "listIncidentPublicNote",
      "Endpoint to list all Incident Public Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentPublicNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentPublicNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentPublicNote. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentPublicNote(args);
      }
    );

    server.tool(
      "countIncidentPublicNote",
      "Endpoint to count Incident Public Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentPublicNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentPublicNote(args);
      }
    );

    server.tool(
      "createIncidentPublicNote",
      "Endpoint to create a new Incident Public Note",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentPublicNote model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Status Page Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnNoteCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this note?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "incidentId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentPublicNote(args);
      }
    );

    server.tool(
      "getIncidentPublicNote",
      "Endpoint to retrieve a single Incident Public Note by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Public Note to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentPublicNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentPublicNote(args);
      }
    );

    server.tool(
      "updateIncidentPublicNote",
      "Endpoint to update an existing Incident Public Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Public Note to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentPublicNote model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Incident Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Incident Status Page Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentPublicNote(args);
      }
    );

    server.tool(
      "deleteIncidentPublicNote",
      "Endpoint to delete a Incident Public Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Public Note to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentPublicNote(args);
      }
    );

    server.tool(
      "listIncidentTemplate",
      "Endpoint to list all Incident Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentTemplate(args);
      }
    );

    server.tool(
      "countIncidentTemplate",
      "Endpoint to count Incident Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentTemplate(args);
      }
    );

    server.tool(
      "createIncidentTemplate",
      "Endpoint to create a new Incident Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "This is an example of longer text content that provides detailed information.",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this incident. This is in markdown and will be visible on the status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors affected by this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this incident.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "incidentSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "title",
                              "templateName",
                              "templateDescription"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentTemplate(args);
      }
    );

    server.tool(
      "getIncidentTemplate",
      "Endpoint to retrieve a single Incident Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentTemplate(args);
      }
    );

    server.tool(
      "updateIncidentTemplate",
      "Endpoint to update an existing Incident Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentTemplate model. Update",
                        "example": {
                              "title": "This is an example of longer text content that provides detailed information.",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this incident. This is in markdown and will be visible on the status page.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors affected by this incident. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this incident.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "incidentSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentTemplate(args);
      }
    );

    server.tool(
      "deleteIncidentTemplate",
      "Endpoint to delete a Incident Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentTemplate(args);
      }
    );

    server.tool(
      "listIncidentTemplateOwnerTeam",
      "Endpoint to list all Incident Template Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplateOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplateOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentTemplateOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "countIncidentTemplateOwnerTeam",
      "Endpoint to count Incident Template Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplateOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "createIncidentTemplateOwnerTeam",
      "Endpoint to create a new Incident Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentTemplateOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentTemplateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentTemplateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "incidentTemplateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "getIncidentTemplateOwnerTeam",
      "Endpoint to retrieve a single Incident Template Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplateOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "updateIncidentTemplateOwnerTeam",
      "Endpoint to update an existing Incident Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentTemplateOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "deleteIncidentTemplateOwnerTeam",
      "Endpoint to delete a Incident Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "listIncidentTemplateOwnerUser",
      "Endpoint to list all Incident Template User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplateOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplateOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentTemplateOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "countIncidentTemplateOwnerUser",
      "Endpoint to count Incident Template User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentTemplateOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "createIncidentTemplateOwnerUser",
      "Endpoint to create a new Incident Template User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentTemplateOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentTemplateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentTemplateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "incidentTemplateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "getIncidentTemplateOwnerUser",
      "Endpoint to retrieve a single Incident Template User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentTemplateOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "updateIncidentTemplateOwnerUser",
      "Endpoint to update an existing Incident Template User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentTemplateOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "deleteIncidentTemplateOwnerUser",
      "Endpoint to delete a Incident Template User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Template User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentTemplateOwnerUser(args);
      }
    );

    server.tool(
      "listIncidentOwnerTeam",
      "Endpoint to list all Incident Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "countIncidentOwnerTeam",
      "Endpoint to count Incident Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "createIncidentOwnerTeam",
      "Endpoint to create a new Incident Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "incidentId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "getIncidentOwnerTeam",
      "Endpoint to retrieve a single Incident Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "updateIncidentOwnerTeam",
      "Endpoint to update an existing Incident Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "deleteIncidentOwnerTeam",
      "Endpoint to delete a Incident Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentOwnerTeam(args);
      }
    );

    server.tool(
      "listIncidentOwnerUser",
      "Endpoint to list all Incident User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentOwnerUser(args);
      }
    );

    server.tool(
      "countIncidentOwnerUser",
      "Endpoint to count Incident User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentOwnerUser(args);
      }
    );

    server.tool(
      "createIncidentOwnerUser",
      "Endpoint to create a new Incident User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "incidentId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "incidentId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident User Owner], Read: [Project Owner, Project Admin, Project Member, Read Incident User Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "userId",
                              "incidentId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentOwnerUser(args);
      }
    );

    server.tool(
      "getIncidentOwnerUser",
      "Endpoint to retrieve a single Incident User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentOwnerUser(args);
      }
    );

    server.tool(
      "updateIncidentOwnerUser",
      "Endpoint to update an existing Incident User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentOwnerUser(args);
      }
    );

    server.tool(
      "deleteIncidentOwnerUser",
      "Endpoint to delete a Incident User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentOwnerUser(args);
      }
    );

    server.tool(
      "listIncidentSeverity",
      "Endpoint to list all Incident Severity items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentSeverity. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentSeverity. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentSeverity. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentSeverity(args);
      }
    );

    server.tool(
      "countIncidentSeverity",
      "Endpoint to count Incident Severity items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentSeverity. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentSeverity(args);
      }
    );

    server.tool(
      "createIncidentSeverity",
      "Endpoint to create a new Incident Severity",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentSeverity model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": 10
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentSeverity(args);
      }
    );

    server.tool(
      "getIncidentSeverity",
      "Endpoint to retrieve a single Incident Severity by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Severity to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentSeverity. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentSeverity(args);
      }
    );

    server.tool(
      "updateIncidentSeverity",
      "Endpoint to update an existing Incident Severity",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Severity to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentSeverity model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Severity], Read: [Project Owner, Project Admin, Project Member, Read Incident Severity], Update: [Project Owner, Project Admin, Project Member, Edit Incident Severity]",
                                    "example": 10
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentSeverity(args);
      }
    );

    server.tool(
      "deleteIncidentSeverity",
      "Endpoint to delete a Incident Severity",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Severity to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentSeverity(args);
      }
    );

    server.tool(
      "listIncidentNoteTemplate",
      "Endpoint to list all Incident Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for IncidentNoteTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "countIncidentNoteTemplate",
      "Endpoint to count Incident Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for IncidentNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "createIncidentNoteTemplate",
      "Endpoint to create a new Incident Note Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for IncidentNoteTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "templateName",
                              "templateDescription"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "getIncidentNoteTemplate",
      "Endpoint to retrieve a single Incident Note Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Note Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for IncidentNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "updateIncidentNoteTemplate",
      "Endpoint to update an existing Incident Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Note Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for IncidentNoteTemplate model. Update",
                        "example": {
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident Note Template], Read: [Project Owner, Project Admin, Project Member, Read Incident Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Incident Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "deleteIncidentNoteTemplate",
      "Endpoint to delete a Incident Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Incident Note Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteIncidentNoteTemplate(args);
      }
    );

    server.tool(
      "listAlertState",
      "Endpoint to list all Alert State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertState. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertState(args);
      }
    );

    server.tool(
      "countAlertState",
      "Endpoint to count Alert State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertState(args);
      }
    );

    server.tool(
      "createAlertState",
      "Endpoint to create a new Alert State",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertState model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isCreatedState": {
                                    "type": "boolean",
                                    "description": "Is it the created state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "isAcknowledgedState": {
                                    "type": "boolean",
                                    "description": "Is it the acknowledged state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is it the resolved state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": 10
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertState(args);
      }
    );

    server.tool(
      "getAlertState",
      "Endpoint to retrieve a single Alert State by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertState(args);
      }
    );

    server.tool(
      "updateAlertState",
      "Endpoint to update an existing Alert State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertState model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isCreatedState": {
                                    "type": "boolean",
                                    "description": "Is it the created state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "isAcknowledgedState": {
                                    "type": "boolean",
                                    "description": "Is it the acknowledged state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is it the resolved state of the alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State], Read: [Project Owner, Project Admin, Project Member, Read Alert State], Update: [Project Owner, Project Admin, Project Member, Edit Alert State]",
                                    "example": 10
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertState(args);
      }
    );

    server.tool(
      "deleteAlertState",
      "Endpoint to delete a Alert State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertState(args);
      }
    );

    server.tool(
      "listAlert",
      "Endpoint to list all Alert items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Alert. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Alert. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Alert. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlert(args);
      }
    );

    server.tool(
      "countAlert",
      "Endpoint to count Alert items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Alert. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlert(args);
      }
    );

    server.tool(
      "createAlert",
      "Endpoint to create a new Alert",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Alert model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "This is an example of longer text content that provides detailed information.",
                              "alertSeverityId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this alert. This will be visible on the status page. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this alert.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentAlertStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorStatusWhenThisAlertWasCreatedId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this alert?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "remediationNotes": {
                                    "type": "string",
                                    "description": "Notes on how to remediate this alert. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "telemetryQuery": {
                                    "type": "object",
                                    "description": "Telemetry query for this alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "title",
                              "alertSeverityId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlert(args);
      }
    );

    server.tool(
      "getAlert",
      "Endpoint to retrieve a single Alert by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Alert. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlert(args);
      }
    );

    server.tool(
      "updateAlert",
      "Endpoint to update an existing Alert",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Alert model. Update",
                        "example": {
                              "title": "This is an example of longer text content that provides detailed information.",
                              "currentAlertStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertSeverityId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Short description of this alert. This will be visible on the status page. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicies": {
                                    "type": "array",
                                    "description": "List of on-call duty policy affected by this alert.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentAlertStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertSeverityId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorStatusWhenThisAlertWasCreatedId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "remediationNotes": {
                                    "type": "string",
                                    "description": "Notes on how to remediate this alert. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "telemetryQuery": {
                                    "type": "object",
                                    "description": "Telemetry query for this alert. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert], Read: [Project Owner, Project Admin, Project Member, Read Alert], Update: [Project Owner, Project Admin, Project Member, Edit Alert]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlert(args);
      }
    );

    server.tool(
      "deleteAlert",
      "Endpoint to delete a Alert",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlert(args);
      }
    );

    server.tool(
      "listAlertFeed",
      "Endpoint to list all Alert Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "alertFeedEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertFeed. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertFeed(args);
      }
    );

    server.tool(
      "countAlertFeed",
      "Endpoint to count Alert Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertFeed(args);
      }
    );

    server.tool(
      "createAlertFeed",
      "Endpoint to create a new Alert Feed",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertFeed model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "feedInfoInMarkdown": null,
                              "alertFeedEventType": "Example Text",
                              "displayColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "feedInfoInMarkdown": {
                                    "type": "string",
                                    "description": "Log of the entire alert state change in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "moreInformationInMarkdown": {
                                    "type": "string",
                                    "description": "More information in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "alertFeedEventType": {
                                    "type": "string",
                                    "description": "Alert Feed Event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Feed], Read: [Project Owner, Project Admin, Project Member, Read Alert Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "displayColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "alertId",
                              "feedInfoInMarkdown",
                              "alertFeedEventType",
                              "displayColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertFeed(args);
      }
    );

    server.tool(
      "getAlertFeed",
      "Endpoint to retrieve a single Alert Feed by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Feed to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "alertFeedEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertFeed(args);
      }
    );

    server.tool(
      "listAlertCustomField",
      "Endpoint to list all Alert Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertCustomField(args);
      }
    );

    server.tool(
      "countAlertCustomField",
      "Endpoint to count Alert Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertCustomField(args);
      }
    );

    server.tool(
      "createAlertCustomField",
      "Endpoint to create a new Alert Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertCustomField(args);
      }
    );

    server.tool(
      "getAlertCustomField",
      "Endpoint to retrieve a single Alert Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertCustomField(args);
      }
    );

    server.tool(
      "updateAlertCustomField",
      "Endpoint to update an existing Alert Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Alert Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Alert Custom Field], Update: [Project Owner, Project Admin, Edit Alert Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertCustomField(args);
      }
    );

    server.tool(
      "deleteAlertCustomField",
      "Endpoint to delete a Alert Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertCustomField(args);
      }
    );

    server.tool(
      "listAlertStateTimeline",
      "Endpoint to list all Alert State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertStateTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertStateTimeline(args);
      }
    );

    server.tool(
      "countAlertStateTimeline",
      "Endpoint to count Alert State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertStateTimeline(args);
      }
    );

    server.tool(
      "createAlertStateTimeline",
      "Endpoint to create a new Alert State Timeline",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertStateTimeline model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this status change?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Alert State Timeline], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "alertId",
                              "alertStateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertStateTimeline(args);
      }
    );

    server.tool(
      "getAlertStateTimeline",
      "Endpoint to retrieve a single Alert State Timeline by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State Timeline to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertStateTimeline(args);
      }
    );

    server.tool(
      "updateAlertStateTimeline",
      "Endpoint to update an existing Alert State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State Timeline to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertStateTimeline model. Update",
                        "example": {
                              "alertStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertStateTimeline(args);
      }
    );

    server.tool(
      "deleteAlertStateTimeline",
      "Endpoint to delete a Alert State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert State Timeline to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertStateTimeline(args);
      }
    );

    server.tool(
      "listAlertInternalNote",
      "Endpoint to list all Alert Internal Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertInternalNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertInternalNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertInternalNote. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertInternalNote(args);
      }
    );

    server.tool(
      "countAlertInternalNote",
      "Endpoint to count Alert Internal Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertInternalNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertInternalNote(args);
      }
    );

    server.tool(
      "createAlertInternalNote",
      "Endpoint to create a new Alert Internal Note",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertInternalNote model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Alert Internal Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        },
                        "required": [
                              "alertId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertInternalNote(args);
      }
    );

    server.tool(
      "getAlertInternalNote",
      "Endpoint to retrieve a single Alert Internal Note by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Internal Note to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertInternalNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertInternalNote(args);
      }
    );

    server.tool(
      "updateAlertInternalNote",
      "Endpoint to update an existing Alert Internal Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Internal Note to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertInternalNote model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Internal Note], Read: [Project Owner, Project Admin, Project Member, Read Alert Internal Note], Update: [Project Owner, Project Admin, Project Member, Edit Alert Internal Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertInternalNote(args);
      }
    );

    server.tool(
      "deleteAlertInternalNote",
      "Endpoint to delete a Alert Internal Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Internal Note to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertInternalNote(args);
      }
    );

    server.tool(
      "listAlertOwnerTeam",
      "Endpoint to list all Alert Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertOwnerTeam(args);
      }
    );

    server.tool(
      "countAlertOwnerTeam",
      "Endpoint to count Alert Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertOwnerTeam(args);
      }
    );

    server.tool(
      "createAlertOwnerTeam",
      "Endpoint to create a new Alert Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert Team Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "teamId",
                              "alertId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertOwnerTeam(args);
      }
    );

    server.tool(
      "getAlertOwnerTeam",
      "Endpoint to retrieve a single Alert Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertOwnerTeam(args);
      }
    );

    server.tool(
      "updateAlertOwnerTeam",
      "Endpoint to update an existing Alert Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertOwnerTeam(args);
      }
    );

    server.tool(
      "deleteAlertOwnerTeam",
      "Endpoint to delete a Alert Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertOwnerTeam(args);
      }
    );

    server.tool(
      "listAlertOwnerUser",
      "Endpoint to list all Alert User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertOwnerUser(args);
      }
    );

    server.tool(
      "countAlertOwnerUser",
      "Endpoint to count Alert User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertOwnerUser(args);
      }
    );

    server.tool(
      "createAlertOwnerUser",
      "Endpoint to create a new Alert User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "alertId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "alertId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert User Owner], Read: [Project Owner, Project Admin, Project Member, Read Alert User Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "userId",
                              "alertId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertOwnerUser(args);
      }
    );

    server.tool(
      "getAlertOwnerUser",
      "Endpoint to retrieve a single Alert User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertOwnerUser(args);
      }
    );

    server.tool(
      "updateAlertOwnerUser",
      "Endpoint to update an existing Alert User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertOwnerUser(args);
      }
    );

    server.tool(
      "deleteAlertOwnerUser",
      "Endpoint to delete a Alert User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertOwnerUser(args);
      }
    );

    server.tool(
      "listAlertSeverity",
      "Endpoint to list all Alert Severity items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertSeverity. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertSeverity. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertSeverity. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertSeverity(args);
      }
    );

    server.tool(
      "countAlertSeverity",
      "Endpoint to count Alert Severity items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertSeverity. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertSeverity(args);
      }
    );

    server.tool(
      "createAlertSeverity",
      "Endpoint to create a new Alert Severity",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertSeverity model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": 10
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertSeverity(args);
      }
    );

    server.tool(
      "getAlertSeverity",
      "Endpoint to retrieve a single Alert Severity by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Severity to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertSeverity. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertSeverity(args);
      }
    );

    server.tool(
      "updateAlertSeverity",
      "Endpoint to update an existing Alert Severity",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Severity to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertSeverity model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Severity], Read: [Project Owner, Project Admin, Project Member, Read Alert Severity], Update: [Project Owner, Project Admin, Project Member, Edit Alert Severity]",
                                    "example": 10
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertSeverity(args);
      }
    );

    server.tool(
      "deleteAlertSeverity",
      "Endpoint to delete a Alert Severity",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Severity to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertSeverity(args);
      }
    );

    server.tool(
      "listAlertNoteTemplate",
      "Endpoint to list all Alert Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for AlertNoteTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listAlertNoteTemplate(args);
      }
    );

    server.tool(
      "countAlertNoteTemplate",
      "Endpoint to count Alert Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for AlertNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countAlertNoteTemplate(args);
      }
    );

    server.tool(
      "createAlertNoteTemplate",
      "Endpoint to create a new Alert Note Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for AlertNoteTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Alert Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Alert Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "templateName",
                              "templateDescription"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createAlertNoteTemplate(args);
      }
    );

    server.tool(
      "getAlertNoteTemplate",
      "Endpoint to retrieve a single Alert Note Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Note Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for AlertNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getAlertNoteTemplate(args);
      }
    );

    server.tool(
      "updateAlertNoteTemplate",
      "Endpoint to update an existing Alert Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Note Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for AlertNoteTemplate model. Update",
                        "example": {
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Alert Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Alert Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Alert Note Template], Read: [Project Owner, Project Admin, Project Member, Read Alert Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Alert Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateAlertNoteTemplate(args);
      }
    );

    server.tool(
      "deleteAlertNoteTemplate",
      "Endpoint to delete a Alert Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Alert Note Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteAlertNoteTemplate(args);
      }
    );

    server.tool(
      "listMonitorStatusTimeline",
      "Endpoint to list all Monitor Status Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorStatusTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorStatusTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorStatusTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "countMonitorStatusTimeline",
      "Endpoint to count Monitor Status Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorStatusTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "createMonitorStatusTimeline",
      "Endpoint to create a new Monitor Status Event",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorStatusTimeline model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorStatusId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorStatusId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "rootCause": {
                                    "type": "string",
                                    "description": "What is the root cause of this status change?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Status Timeline], Read: [Project Owner, Project Admin, Project Member, Read Monitor Status Timeline], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "monitorId",
                              "monitorStatusId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "getMonitorStatusTimeline",
      "Endpoint to retrieve a single Monitor Status Event by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status Event to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorStatusTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "updateMonitorStatusTimeline",
      "Endpoint to update an existing Monitor Status Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status Event to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorStatusTimeline model. Update",
                        "example": {
                              "monitorStatusId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorStatusId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "deleteMonitorStatusTimeline",
      "Endpoint to delete a Monitor Status Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Status Event to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorStatusTimeline(args);
      }
    );

    server.tool(
      "listDomain",
      "Endpoint to list all Domain items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Domain. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Domain. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "domainVerificationText": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Domain. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listDomain(args);
      }
    );

    server.tool(
      "countDomain",
      "Endpoint to count Domain items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Domain. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countDomain(args);
      }
    );

    server.tool(
      "createDomain",
      "Endpoint to create a new Domain",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Domain model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "domain": null
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "domain": {
                                    "type": "object",
                                    "description": "Domain object",
                                    "example": {
                                          "_type": "Domain",
                                          "value": "example.com"
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "domainVerificationText": {
                                    "type": "string",
                                    "description": "Verification text that you need to add to your domains TXT record to veify the domain.. Permissions - Create: [Project Owner, Project Admin, Create Domain], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              }
                        },
                        "required": [
                              "domain"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createDomain(args);
      }
    );

    server.tool(
      "getDomain",
      "Endpoint to retrieve a single Domain by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Domain to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Domain. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "domainVerificationText": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getDomain(args);
      }
    );

    server.tool(
      "updateDomain",
      "Endpoint to update an existing Domain",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Domain to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Domain model. Update",
                        "example": {
                              "domain": null
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "domain": {
                                    "type": "object",
                                    "description": "Domain object",
                                    "example": {
                                          "_type": "Domain",
                                          "value": "example.com"
                                    }
                              },
                              "isVerified": {
                                    "type": "boolean",
                                    "description": "Is this domain verified?. Permissions - Create: [No access - you don't have permission for this operation], Read: [Project Owner, Project Admin, Project Member, Read Domain], Update: [Project Owner, Project Admin, Edit Domain]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateDomain(args);
      }
    );

    server.tool(
      "deleteDomain",
      "Endpoint to delete a Domain",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Domain to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteDomain(args);
      }
    );

    server.tool(
      "listStatusPageGroup",
      "Endpoint to list all Status Page Group items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageGroup. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageGroup. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "uptimePercentPrecision": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageGroup. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageGroup(args);
      }
    );

    server.tool(
      "countStatusPageGroup",
      "Endpoint to count Status Page Group items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageGroup. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageGroup(args);
      }
    );

    server.tool(
      "createStatusPageGroup",
      "Endpoint to create a new Status Page Group",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageGroup model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Name of the Group. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description for this group. This is visible on Status Page. This can be in markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": 42
                              },
                              "isExpandedByDefault": {
                                    "type": "boolean",
                                    "description": "Is this group expanded by default on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "showCurrentStatus": {
                                    "type": "boolean",
                                    "description": "Show current status like offline, operational or degraded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "showUptimePercent": {
                                    "type": "boolean",
                                    "description": "Show uptime percent of this group for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "uptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Precision of uptime percent of this group for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "Example short text"
                              }
                        },
                        "required": [
                              "statusPageId",
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageGroup(args);
      }
    );

    server.tool(
      "getStatusPageGroup",
      "Endpoint to retrieve a single Status Page Group by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Group to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageGroup. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "uptimePercentPrecision": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageGroup(args);
      }
    );

    server.tool(
      "updateStatusPageGroup",
      "Endpoint to update an existing Status Page Group",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Group to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageGroup model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Name of the Group. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description for this group. This is visible on Status Page. This can be in markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": 42
                              },
                              "isExpandedByDefault": {
                                    "type": "boolean",
                                    "description": "Is this group expanded by default on Status Page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "showCurrentStatus": {
                                    "type": "boolean",
                                    "description": "Show current status like offline, operational or degraded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "showUptimePercent": {
                                    "type": "boolean",
                                    "description": "Show uptime percent of this group for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": true
                              },
                              "uptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Precision of uptime percent of this group for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Group], Read: [Project Owner, Project Admin, Project Member, Read Status Page Group], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Group]",
                                    "example": "Example short text"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageGroup(args);
      }
    );

    server.tool(
      "deleteStatusPageGroup",
      "Endpoint to delete a Status Page Group",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Group to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageGroup(args);
      }
    );

    server.tool(
      "listStatusPageDomain",
      "Endpoint to list all Status Page Domain items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageDomain. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageDomain. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "subdomain": true,
                              "fullDomain": true,
                              "cnameVerificationToken": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageDomain. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageDomain(args);
      }
    );

    server.tool(
      "countStatusPageDomain",
      "Endpoint to count Status Page Domain items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageDomain. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageDomain(args);
      }
    );

    server.tool(
      "createStatusPageDomain",
      "Endpoint to create a new Status Page Domain",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageDomain model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "domainId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "subdomain": "Example Text",
                              "fullDomain": "Example Text",
                              "cnameVerificationToken": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "domainId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "subdomain": {
                                    "type": "string",
                                    "description": "Subdomain of your status page - like (status). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "Example short text"
                              },
                              "fullDomain": {
                                    "type": "string",
                                    "description": "Full domain of your status page (like status.acmeinc.com). This is autogenerated and is derived from subdomain and domain.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "cnameVerificationToken": {
                                    "type": "string",
                                    "description": "CNAME Verification Token. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "customCertificate": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "customCertificateKey": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "isCustomCertificate": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": true
                              }
                        },
                        "required": [
                              "domainId",
                              "statusPageId",
                              "subdomain",
                              "fullDomain",
                              "cnameVerificationToken"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageDomain(args);
      }
    );

    server.tool(
      "getStatusPageDomain",
      "Endpoint to retrieve a single Status Page Domain by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Domain to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageDomain. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "subdomain": true,
                              "fullDomain": true,
                              "cnameVerificationToken": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageDomain(args);
      }
    );

    server.tool(
      "updateStatusPageDomain",
      "Endpoint to update an existing Status Page Domain",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Domain to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageDomain model. Update",
                        "example": {
                              "subdomain": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "subdomain": {
                                    "type": "string",
                                    "description": "Subdomain of your status page - like (status). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "Example short text"
                              },
                              "customCertificate": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "customCertificateKey": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "isCustomCertificate": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Domain], Read: [Project Owner, Project Admin, Project Member, Read Status Page Domain], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Domain]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageDomain(args);
      }
    );

    server.tool(
      "deleteStatusPageDomain",
      "Endpoint to delete a Status Page Domain",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Domain to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageDomain(args);
      }
    );

    server.tool(
      "listStatusPageCustomField",
      "Endpoint to list all Status Page Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageCustomField(args);
      }
    );

    server.tool(
      "countStatusPageCustomField",
      "Endpoint to count Status Page Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageCustomField(args);
      }
    );

    server.tool(
      "createStatusPageCustomField",
      "Endpoint to create a new Status Page Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageCustomField(args);
      }
    );

    server.tool(
      "getStatusPageCustomField",
      "Endpoint to retrieve a single Status Page Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageCustomField(args);
      }
    );

    server.tool(
      "updateStatusPageCustomField",
      "Endpoint to update an existing Status Page Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Status Page Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Status Page Custom Field], Update: [Project Owner, Project Admin, Edit Status Page Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageCustomField(args);
      }
    );

    server.tool(
      "deleteStatusPageCustomField",
      "Endpoint to delete a Status Page Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageCustomField(args);
      }
    );

    server.tool(
      "listStatusPageResource",
      "Endpoint to list all Status Page Resource items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageResource. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageResource. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "displayName": true,
                              "uptimePercentPrecision": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageResource. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageResource(args);
      }
    );

    server.tool(
      "countStatusPageResource",
      "Endpoint to count Status Page Resource items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageResource. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageResource(args);
      }
    );

    server.tool(
      "createStatusPageResource",
      "Endpoint to create a new Status Page Resource",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageResource model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "displayName": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "displayName": {
                                    "type": "string",
                                    "description": "Display name of the monitor on the Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "Example short text"
                              },
                              "displayDescription": {
                                    "type": "string",
                                    "description": "Display description of the monitor on the Status Page. This is in markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "displayTooltip": {
                                    "type": "string",
                                    "description": "Tooltip of the monitor on the Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "showCurrentStatus": {
                                    "type": "boolean",
                                    "description": "Show current status like offline, operational or degraded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "showUptimePercent": {
                                    "type": "boolean",
                                    "description": "Show uptime percent of this monitor for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "uptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Precision of uptime percent of this monitor for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "Example short text"
                              },
                              "showStatusHistoryChart": {
                                    "type": "boolean",
                                    "description": "Show a 90 day uptime history of this monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "statusPageId",
                              "displayName"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageResource(args);
      }
    );

    server.tool(
      "getStatusPageResource",
      "Endpoint to retrieve a single Status Page Resource by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Resource to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageResource. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "displayName": true,
                              "uptimePercentPrecision": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageResource(args);
      }
    );

    server.tool(
      "updateStatusPageResource",
      "Endpoint to update an existing Status Page Resource",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Resource to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageResource model. Update",
                        "example": {
                              "displayName": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "displayName": {
                                    "type": "string",
                                    "description": "Display name of the monitor on the Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "Example short text"
                              },
                              "displayDescription": {
                                    "type": "string",
                                    "description": "Display description of the monitor on the Status Page. This is in markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "displayTooltip": {
                                    "type": "string",
                                    "description": "Tooltip of the monitor on the Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "showCurrentStatus": {
                                    "type": "boolean",
                                    "description": "Show current status like offline, operational or degraded.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "showUptimePercent": {
                                    "type": "boolean",
                                    "description": "Show uptime percent of this monitor for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "uptimePercentPrecision": {
                                    "type": "string",
                                    "description": "Precision of uptime percent of this monitor for the last 90 days. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": "Example short text"
                              },
                              "showStatusHistoryChart": {
                                    "type": "boolean",
                                    "description": "Show a 90 day uptime history of this monitor. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": true
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Resource], Read: [Project Owner, Project Admin, Project Member, Read Status Page Resource], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Resource]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageResource(args);
      }
    );

    server.tool(
      "deleteStatusPageResource",
      "Endpoint to delete a Status Page Resource",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Resource to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageResource(args);
      }
    );

    server.tool(
      "listStatusPageAnnouncement",
      "Endpoint to list all Status Page Announcement items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageAnnouncement. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageAnnouncement. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageAnnouncement. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "countStatusPageAnnouncement",
      "Endpoint to count Status Page Announcement items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageAnnouncement. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "createStatusPageAnnouncement",
      "Endpoint to create a new Status Page Announcement",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageAnnouncement model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "Example Text",
                              "showAnnouncementAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "description": null
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "Status Pages to show show this announcement on.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": "Example short text"
                              },
                              "showAnnouncementAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endAnnouncementAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Text of the announcement. This can be in Markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldStatusPageSubscribersBeNotified": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this announcement?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "title",
                              "showAnnouncementAt",
                              "description"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "getStatusPageAnnouncement",
      "Endpoint to retrieve a single Status Page Announcement by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageAnnouncement. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "updateStatusPageAnnouncement",
      "Endpoint to update an existing Status Page Announcement",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageAnnouncement model. Update",
                        "example": {
                              "title": "Example Text",
                              "showAnnouncementAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "description": null
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "Status Pages to show show this announcement on.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": "Example short text"
                              },
                              "showAnnouncementAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endAnnouncementAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Text of the announcement. This can be in Markdown format.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "deleteStatusPageAnnouncement",
      "Endpoint to delete a Status Page Announcement",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageAnnouncement(args);
      }
    );

    server.tool(
      "listStatusPageAnnouncementTemplate",
      "Endpoint to list all Status Page Announcement Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageAnnouncementTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageAnnouncementTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageAnnouncementTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "countStatusPageAnnouncementTemplate",
      "Endpoint to count Status Page Announcement Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageAnnouncementTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "createStatusPageAnnouncementTemplate",
      "Endpoint to create a new Status Page Announcement Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageAnnouncementTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "templateName": "Example Text",
                              "title": "Example Text",
                              "description": null
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the announcement template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the announcement template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of the announcement. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Text of the announcement. This is in Markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "Status Pages to show this announcement on.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "shouldStatusPageSubscribersBeNotified": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about announcements created from this template?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": true
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "templateName",
                              "title",
                              "description"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "getStatusPageAnnouncementTemplate",
      "Endpoint to retrieve a single Status Page Announcement Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageAnnouncementTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "updateStatusPageAnnouncementTemplate",
      "Endpoint to update an existing Status Page Announcement Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageAnnouncementTemplate model. Update",
                        "example": {
                              "templateName": "Example Text",
                              "title": "Example Text",
                              "description": null
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the announcement template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the announcement template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of the announcement. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Text of the announcement. This is in Markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "Status Pages to show this announcement on.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "shouldStatusPageSubscribersBeNotified": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about announcements created from this template?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Announcement Template], Read: [Project Owner, Project Admin, Project Member, Read Status Page Announcement Template], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Announcement Template]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "deleteStatusPageAnnouncementTemplate",
      "Endpoint to delete a Status Page Announcement Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Announcement Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageAnnouncementTemplate(args);
      }
    );

    server.tool(
      "listStatusPageSubscriber",
      "Endpoint to list all Status Page Subscriber items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageSubscriber. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageSubscriber. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "subscriberEmail": true,
                              "slackWorkspaceName": true,
                              "subscriptionConfirmationToken": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageSubscriber. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageSubscriber(args);
      }
    );

    server.tool(
      "countStatusPageSubscriber",
      "Endpoint to count Status Page Subscriber items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageSubscriber. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageSubscriber(args);
      }
    );

    server.tool(
      "createStatusPageSubscriber",
      "Endpoint to create a new Status Page Subscriber",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageSubscriber model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "subscriberEmail": {
                                    "type": "object",
                                    "description": "Email object",
                                    "example": {
                                          "_type": "Email",
                                          "value": "user@example.com"
                                    }
                              },
                              "subscriberPhone": {
                                    "type": "object",
                                    "description": "Phone object",
                                    "example": {
                                          "_type": "Phone",
                                          "value": "+1-555-123-4567"
                                    }
                              },
                              "subscriberWebhook": {
                                    "type": "string",
                                    "description": "Webhook to ping when events happen on Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "https://short.url/abc123"
                              },
                              "slackIncomingWebhookUrl": {
                                    "type": "string",
                                    "description": "Slack incoming webhook URL to send notifications to Slack channel. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": "https://short.url/abc123"
                              },
                              "slackWorkspaceName": {
                                    "type": "string",
                                    "description": "Name of the Slack workspace for validation and identification. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "Example short text"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isSubscriptionConfirmed": {
                                    "type": "boolean",
                                    "description": "Has subscriber confirmed their subscription? (for example, by clicking on a confirmation link in an email). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "subscriptionConfirmationToken": {
                                    "type": "string",
                                    "description": "Token used to confirm subscription. This is a random token that is sent to the subscriber's email address to confirm their subscription.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber], Read: [No access - you don't have permission for this operation], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "isUnsubscribed": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Unsubscribed?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "sendYouHaveSubscribedMessage": {
                                    "type": "boolean",
                                    "description": "Send You Have Subscribed Message when subscriber is created?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "isSubscribedToAllResources": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Subscribed to All Resources on this status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "isSubscribedToAllEventTypes": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Subscribed to All Event Types (like Incidents, Scheduled Events, Announcements) on this status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "statusPageResources": {
                                    "type": "array",
                                    "description": "Relation to Status Page Resources where this subscriber is subscribed to. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPageEventTypes": {
                                    "type": "object",
                                    "description": "Which event types is the subscriber subscribed to (like Incidents, Scheduled Events, Announcements). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "internalNote": {
                                    "type": "string",
                                    "description": "Any notes or text you would like to add to this subscriber object. This is for internal use only.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        },
                        "required": [
                              "statusPageId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageSubscriber(args);
      }
    );

    server.tool(
      "getStatusPageSubscriber",
      "Endpoint to retrieve a single Status Page Subscriber by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Subscriber to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageSubscriber. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "subscriberEmail": true,
                              "slackWorkspaceName": true,
                              "subscriptionConfirmationToken": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageSubscriber(args);
      }
    );

    server.tool(
      "updateStatusPageSubscriber",
      "Endpoint to update an existing Status Page Subscriber",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Subscriber to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageSubscriber model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "subscriberEmail": {
                                    "type": "object",
                                    "description": "Email object",
                                    "example": {
                                          "_type": "Email",
                                          "value": "user@example.com"
                                    }
                              },
                              "subscriberPhone": {
                                    "type": "object",
                                    "description": "Phone object",
                                    "example": {
                                          "_type": "Phone",
                                          "value": "+1-555-123-4567"
                                    }
                              },
                              "subscriberWebhook": {
                                    "type": "string",
                                    "description": "Webhook to ping when events happen on Status Page. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "https://short.url/abc123"
                              },
                              "slackWorkspaceName": {
                                    "type": "string",
                                    "description": "Name of the Slack workspace for validation and identification. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "Example short text"
                              },
                              "isSubscriptionConfirmed": {
                                    "type": "boolean",
                                    "description": "Has subscriber confirmed their subscription? (for example, by clicking on a confirmation link in an email). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "isUnsubscribed": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Unsubscribed?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "isSubscribedToAllResources": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Subscribed to All Resources on this status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "isSubscribedToAllEventTypes": {
                                    "type": "boolean",
                                    "description": "Is Subscriber Subscribed to All Event Types (like Incidents, Scheduled Events, Announcements) on this status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": true
                              },
                              "statusPageResources": {
                                    "type": "array",
                                    "description": "Relation to Status Page Resources where this subscriber is subscribed to. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPageEventTypes": {
                                    "type": "object",
                                    "description": "Which event types is the subscriber subscribed to (like Incidents, Scheduled Events, Announcements). Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "internalNote": {
                                    "type": "string",
                                    "description": "Any notes or text you would like to add to this subscriber object. This is for internal use only.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Subscriber, Public], Read: [Project Owner, Project Admin, Project Member, Read Status Page Subscriber], Update: [Project Owner, Project Admin, Project Member, Edit Status Page Subscriber]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageSubscriber(args);
      }
    );

    server.tool(
      "deleteStatusPageSubscriber",
      "Endpoint to delete a Status Page Subscriber",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Subscriber to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageSubscriber(args);
      }
    );

    server.tool(
      "listStatusPageFooterLink",
      "Endpoint to list all Status Page Footer Link items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageFooterLink. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageFooterLink. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageFooterLink. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageFooterLink(args);
      }
    );

    server.tool(
      "countStatusPageFooterLink",
      "Endpoint to count Status Page Footer Link items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageFooterLink. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageFooterLink(args);
      }
    );

    server.tool(
      "createStatusPageFooterLink",
      "Endpoint to create a new Status Page Footer Link",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageFooterLink model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "Example Text",
                              "link": "https://example.com"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": "Example short text"
                              },
                              "link": {
                                    "type": "string",
                                    "description": "URL to a website or any other resource on the internet. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": "https://short.url/abc123"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "statusPageId",
                              "title",
                              "link"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageFooterLink(args);
      }
    );

    server.tool(
      "getStatusPageFooterLink",
      "Endpoint to retrieve a single Status Page Footer Link by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Footer Link to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageFooterLink. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageFooterLink(args);
      }
    );

    server.tool(
      "updateStatusPageFooterLink",
      "Endpoint to update an existing Status Page Footer Link",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Footer Link to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageFooterLink model. Update",
                        "example": {
                              "title": "Example Text",
                              "link": "https://example.com"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": "Example short text"
                              },
                              "link": {
                                    "type": "string",
                                    "description": "URL to a website or any other resource on the internet. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": "https://short.url/abc123"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Footer Link], Read: [Project Owner, Project Admin, Project Member, Read Footer Link], Update: [Project Owner, Project Admin, Project Member, Edit Footer Link]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageFooterLink(args);
      }
    );

    server.tool(
      "deleteStatusPageFooterLink",
      "Endpoint to delete a Status Page Footer Link",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Footer Link to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageFooterLink(args);
      }
    );

    server.tool(
      "listStatusPageHeaderLink",
      "Endpoint to list all Status Page Header Link items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageHeaderLink. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageHeaderLink. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageHeaderLink. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "countStatusPageHeaderLink",
      "Endpoint to count Status Page Header Link items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageHeaderLink. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "createStatusPageHeaderLink",
      "Endpoint to create a new Status Page Header Link",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageHeaderLink model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "Example Text",
                              "link": "https://example.com"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": "Example short text"
                              },
                              "link": {
                                    "type": "string",
                                    "description": "URL to a website or any other resource on the internet. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": "https://short.url/abc123"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "statusPageId",
                              "title",
                              "link"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "getStatusPageHeaderLink",
      "Endpoint to retrieve a single Status Page Header Link by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Header Link to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageHeaderLink. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "updateStatusPageHeaderLink",
      "Endpoint to update an existing Status Page Header Link",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Header Link to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageHeaderLink model. Update",
                        "example": {
                              "title": "Example Text",
                              "link": "https://example.com"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": "Example short text"
                              },
                              "link": {
                                    "type": "string",
                                    "description": "URL to a website or any other resource on the internet. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": "https://short.url/abc123"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Header Link], Read: [Project Owner, Project Admin, Project Member, Read Header Link], Update: [Project Owner, Project Admin, Project Member, Edit Header Link]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "deleteStatusPageHeaderLink",
      "Endpoint to delete a Status Page Header Link",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Header Link to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageHeaderLink(args);
      }
    );

    server.tool(
      "listStatusPagePrivateUser",
      "Endpoint to list all Status Page Private User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPagePrivateUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPagePrivateUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "email": true,
                              "resetPasswordToken": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPagePrivateUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "countStatusPagePrivateUser",
      "Endpoint to count Status Page Private User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPagePrivateUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "createStatusPagePrivateUser",
      "Endpoint to create a new Status Page Private User",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPagePrivateUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "email": {
                                    "type": "object",
                                    "description": "Email object",
                                    "example": {
                                          "_type": "Email",
                                          "value": "user@example.com"
                                    }
                              },
                              "password": {
                                    "type": "string",
                                    "description": "Password. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [Project Owner, Project Admin, Project Member, Edit Status Page PrivateUser]",
                                    "example": "hashed_string_value"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isSsoUser": {
                                    "type": "boolean",
                                    "description": "Did this user sign up via SSO?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "statusPageId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "getStatusPagePrivateUser",
      "Endpoint to retrieve a single Status Page Private User by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Private User to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPagePrivateUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "email": true,
                              "resetPasswordToken": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "updateStatusPagePrivateUser",
      "Endpoint to update an existing Status Page Private User",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Private User to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPagePrivateUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "email": {
                                    "type": "object",
                                    "description": "Email object",
                                    "example": {
                                          "_type": "Email",
                                          "value": "user@example.com"
                                    }
                              },
                              "password": {
                                    "type": "string",
                                    "description": "Password. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page Private User], Read: [Project Owner, Project Admin, Project Member, Read Status Page Private User], Update: [Project Owner, Project Admin, Project Member, Edit Status Page PrivateUser]",
                                    "example": "hashed_string_value"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "deleteStatusPagePrivateUser",
      "Endpoint to delete a Status Page Private User",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Private User to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPagePrivateUser(args);
      }
    );

    server.tool(
      "listStatusPageHistoryChartBarColorRule",
      "Endpoint to list all Status Page History Chart Bar Color items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageHistoryChartBarColorRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageHistoryChartBarColorRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageHistoryChartBarColorRule. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "countStatusPageHistoryChartBarColorRule",
      "Endpoint to count Status Page History Chart Bar Color items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageHistoryChartBarColorRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "createStatusPageHistoryChartBarColorRule",
      "Endpoint to create a new Status Page History Chart Bar Color",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageHistoryChartBarColorRule model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "uptimePercentGreaterThanOrEqualTo": 42,
                              "barColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "uptimePercentGreaterThanOrEqualTo": {
                                    "type": "number",
                                    "description": "Uptime percent greater than or equal to this value. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
                                    "example": 42
                              },
                              "barColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "statusPageId",
                              "uptimePercentGreaterThanOrEqualTo",
                              "barColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "getStatusPageHistoryChartBarColorRule",
      "Endpoint to retrieve a single Status Page History Chart Bar Color by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page History Chart Bar Color to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageHistoryChartBarColorRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "updateStatusPageHistoryChartBarColorRule",
      "Endpoint to update an existing Status Page History Chart Bar Color",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page History Chart Bar Color to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageHistoryChartBarColorRule model. Update",
                        "example": {
                              "uptimePercentGreaterThanOrEqualTo": 42,
                              "barColor": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "uptimePercentGreaterThanOrEqualTo": {
                                    "type": "number",
                                    "description": "Uptime percent greater than or equal to this value. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
                                    "example": 42
                              },
                              "barColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page History Chart Bar Color Rule], Read: [Project Owner, Project Admin, Project Member, Read Status Page History Chart Bar Color Rule], Update: [Project Owner, Project Admin, Project Member, Edit Status Page History Chart Bar Color Rule]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "deleteStatusPageHistoryChartBarColorRule",
      "Endpoint to delete a Status Page History Chart Bar Color",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page History Chart Bar Color to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageHistoryChartBarColorRule(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceState",
      "Endpoint to list all Scheduled Maintenance State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceState. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceState",
      "Endpoint to count Scheduled Maintenance State items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceState. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceState",
      "Endpoint to create a new Scheduled Maintenance State",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceState model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isScheduledState": {
                                    "type": "boolean",
                                    "description": "Is this state a scheduled state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isOngoingState": {
                                    "type": "boolean",
                                    "description": "Is this state a ongoing state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isEndedState": {
                                    "type": "boolean",
                                    "description": "Is this state a ended state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is this state a resolved state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": 10
                              }
                        },
                        "required": [
                              "name",
                              "color"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceState",
      "Endpoint to retrieve a single Scheduled Maintenance State by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceState. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceState",
      "Endpoint to update an existing Scheduled Maintenance State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceState model. Update",
                        "example": {
                              "name": "Example Text",
                              "color": "#FF0000"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "color": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "isScheduledState": {
                                    "type": "boolean",
                                    "description": "Is this state a scheduled state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isOngoingState": {
                                    "type": "boolean",
                                    "description": "Is this state a ongoing state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isEndedState": {
                                    "type": "boolean",
                                    "description": "Is this state a ended state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "isResolvedState": {
                                    "type": "boolean",
                                    "description": "Is this state a resolved state?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": true
                              },
                              "order": {
                                    "type": "integer",
                                    "description": "Order / Priority of this resource. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance State]",
                                    "example": 10
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceState",
      "Endpoint to delete a Scheduled Maintenance State",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceState(args);
      }
    );

    server.tool(
      "listScheduledMaintenance",
      "Endpoint to list all Scheduled Maintenance Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenance. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenance. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenance. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenance(args);
      }
    );

    server.tool(
      "countScheduledMaintenance",
      "Endpoint to count Scheduled Maintenance Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenance. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenance(args);
      }
    );

    server.tool(
      "createScheduledMaintenance",
      "Endpoint to create a new Scheduled Maintenance Event",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenance model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "title": "Example Text",
                              "slug": "example-slug",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "endsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this scheduled event.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of this scheduled event that will show up on Status Page. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "slug": {
                                    "type": "string",
                                    "description": "Friendly globally unique name for your object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
                                    "example": "example-slug-value"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors attached to this event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "List of status pages to show this event on. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentScheduledMaintenanceStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnEventCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event creation?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToOngoing": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ongoing?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToEnded": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ended?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendSubscriberNotificationsOnBeforeTheEvent": {
                                    "type": "object",
                                    "description": "Should subscribers be notified before the event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "nextSubscriberNotificationBeforeTheEventAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "isVisibleOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Should this incident be visible on the status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": true
                              }
                        },
                        "required": [
                              "title",
                              "slug",
                              "startsAt",
                              "endsAt"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenance(args);
      }
    );

    server.tool(
      "getScheduledMaintenance",
      "Endpoint to retrieve a single Scheduled Maintenance Event by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Event to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenance. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenance(args);
      }
    );

    server.tool(
      "updateScheduledMaintenance",
      "Endpoint to update an existing Scheduled Maintenance Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Event to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenance model. Update",
                        "example": {
                              "title": "Example Text",
                              "currentScheduledMaintenanceStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "endsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this scheduled event.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of this scheduled event that will show up on Status Page. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors attached to this event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "List of status pages to show this event on. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "currentScheduledMaintenanceStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendSubscriberNotificationsOnBeforeTheEvent": {
                                    "type": "object",
                                    "description": "Should subscribers be notified before the event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "nextSubscriberNotificationBeforeTheEventAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "isVisibleOnStatusPage": {
                                    "type": "boolean",
                                    "description": "Should this incident be visible on the status page?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenance(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenance",
      "Endpoint to delete a Scheduled Maintenance Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Event to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenance(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceStateTimeline",
      "Endpoint to list all Scheduled Maintenance State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceStateTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceStateTimeline",
      "Endpoint to count Scheduled Maintenance State Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceStateTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceStateTimeline",
      "Endpoint to create a new Scheduled Maintenance State Timeline",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceStateTimeline model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "shouldStatusPageSubscribersBeNotified": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this state change?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance State Timeline], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance State Timeline], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "scheduledMaintenanceId",
                              "scheduledMaintenanceStateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceStateTimeline",
      "Endpoint to retrieve a single Scheduled Maintenance State Timeline by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State Timeline to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceStateTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceStateTimeline",
      "Endpoint to update an existing Scheduled Maintenance State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State Timeline to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceStateTimeline model. Update",
                        "example": {
                              "scheduledMaintenanceStateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceStateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceStateTimeline",
      "Endpoint to delete a Scheduled Maintenance State Timeline",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance State Timeline to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceStateTimeline(args);
      }
    );

    server.tool(
      "listScheduledMaintenancePublicNote",
      "Endpoint to list all Scheduled Event Public Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenancePublicNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenancePublicNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenancePublicNote. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "countScheduledMaintenancePublicNote",
      "Endpoint to count Scheduled Event Public Note items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenancePublicNote. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "createScheduledMaintenancePublicNote",
      "Endpoint to create a new Scheduled Event Public Note",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenancePublicNote model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Status Page Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnNoteCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this note?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "scheduledMaintenanceId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "getScheduledMaintenancePublicNote",
      "Endpoint to retrieve a single Scheduled Event Public Note by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Event Public Note to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenancePublicNote. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "updateScheduledMaintenancePublicNote",
      "Endpoint to update an existing Scheduled Event Public Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Event Public Note to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenancePublicNote model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Notes in markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Status Page Note], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Status Page Note], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Status Page Note]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenancePublicNote",
      "Endpoint to delete a Scheduled Event Public Note",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Event Public Note to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenancePublicNote(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceCustomField",
      "Endpoint to list all Scheduled Maintenance Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceCustomField. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceCustomField",
      "Endpoint to count Scheduled Maintenance Custom Field items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceCustomField. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceCustomField",
      "Endpoint to create a new Scheduled Maintenance Custom Field",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceCustomField model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "customFieldType": {
                                    "type": "object",
                                    "description": "Is this field Text, Number or Boolean?. Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "type": "text",
                                          "required": true
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceCustomField",
      "Endpoint to retrieve a single Scheduled Maintenance Custom Field by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Custom Field to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceCustomField. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceCustomField",
      "Endpoint to update an existing Scheduled Maintenance Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Custom Field to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceCustomField model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description of this custom field that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Scheduled Maintenance Custom Field], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Custom Field], Update: [Project Owner, Project Admin, Edit Scheduled Maintenance Custom Field]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceCustomField",
      "Endpoint to delete a Scheduled Maintenance Custom Field",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Custom Field to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceCustomField(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceFeed",
      "Endpoint to list all Scheduled Maintenance Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "scheduledMaintenanceFeedEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceFeed. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceFeed(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceFeed",
      "Endpoint to count Scheduled Maintenance Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceFeed(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceFeed",
      "Endpoint to create a new Scheduled Maintenance Feed",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceFeed model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "feedInfoInMarkdown": null,
                              "scheduledMaintenanceFeedEventType": "Example Text",
                              "displayColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "feedInfoInMarkdown": {
                                    "type": "string",
                                    "description": "Log of the entire scheduled maintenance state change in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "moreInformationInMarkdown": {
                                    "type": "string",
                                    "description": "More information in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "scheduledMaintenanceFeedEventType": {
                                    "type": "string",
                                    "description": "ScheduledMaintenance Log Event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Log], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "displayColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "scheduledMaintenanceId",
                              "feedInfoInMarkdown",
                              "scheduledMaintenanceFeedEventType",
                              "displayColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceFeed(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceFeed",
      "Endpoint to retrieve a single Scheduled Maintenance Feed by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Feed to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "scheduledMaintenanceFeedEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceFeed(args);
      }
    );

    server.tool(
      "listWorkflow",
      "Endpoint to list all Workflow items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Workflow. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Workflow. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "triggerId": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Workflow. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listWorkflow(args);
      }
    );

    server.tool(
      "countWorkflow",
      "Endpoint to count Workflow items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Workflow. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countWorkflow(args);
      }
    );

    server.tool(
      "createWorkflow",
      "Endpoint to create a new Workflow",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Workflow model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Is this workflow enabled?. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": true
                              },
                              "graph": {
                                    "type": "object",
                                    "description": "Workflow Graph in JSON. Ideally, create this via UI and not via API.. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createWorkflow(args);
      }
    );

    server.tool(
      "getWorkflow",
      "Endpoint to retrieve a single Workflow by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Workflow. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "triggerId": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getWorkflow(args);
      }
    );

    server.tool(
      "updateWorkflow",
      "Endpoint to update an existing Workflow",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Workflow model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Is this workflow enabled?. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": true
                              },
                              "graph": {
                                    "type": "object",
                                    "description": "Workflow Graph in JSON. Ideally, create this via UI and not via API.. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Create Workflow, Project Member], Read: [Project Owner, Project Admin, Project Member, Read Workflow], Update: [Project Owner, Project Admin, Delete Workflow, Edit Workflow]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateWorkflow(args);
      }
    );

    server.tool(
      "deleteWorkflow",
      "Endpoint to delete a Workflow",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteWorkflow(args);
      }
    );

    server.tool(
      "listWorkflowVariable",
      "Endpoint to list all Workflow Variable items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkflowVariable. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkflowVariable. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for WorkflowVariable. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listWorkflowVariable(args);
      }
    );

    server.tool(
      "countWorkflowVariable",
      "Endpoint to count Workflow Variable items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkflowVariable. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countWorkflowVariable(args);
      }
    );

    server.tool(
      "createWorkflowVariable",
      "Endpoint to create a new Workflow Variable",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for WorkflowVariable model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "content": null,
                              "isSecret": true
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "workflowId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Variable Name. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "content": {
                                    "type": "string",
                                    "description": "Content of the variable. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [No access - you don't have permission for this operation], Update: [Project Owner, Project Admin]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "isSecret": {
                                    "type": "boolean",
                                    "description": "Is this variable a secret. If true, then it'll not be in the logs. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name",
                              "content"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createWorkflowVariable(args);
      }
    );

    server.tool(
      "getWorkflowVariable",
      "Endpoint to retrieve a single Workflow Variable by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Variable to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkflowVariable. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getWorkflowVariable(args);
      }
    );

    server.tool(
      "updateWorkflowVariable",
      "Endpoint to update an existing Workflow Variable",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Variable to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for WorkflowVariable model. Update",
                        "example": {
                              "name": "Example Text",
                              "content": null
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Variable Name. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [Project Owner, Project Admin, Project Member, Read Workflow Variables], Update: [Project Owner, Project Admin, Edit Workflow Variables]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "content": {
                                    "type": "string",
                                    "description": "Content of the variable. Permissions - Create: [Project Owner, Project Admin, Create Workflow Variables], Read: [No access - you don't have permission for this operation], Update: [Project Owner, Project Admin]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateWorkflowVariable(args);
      }
    );

    server.tool(
      "deleteWorkflowVariable",
      "Endpoint to delete a Workflow Variable",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Variable to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteWorkflowVariable(args);
      }
    );

    server.tool(
      "listWorkflowLog",
      "Endpoint to list all Workflow Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkflowLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkflowLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for WorkflowLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listWorkflowLog(args);
      }
    );

    server.tool(
      "countWorkflowLog",
      "Endpoint to count Workflow Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkflowLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countWorkflowLog(args);
      }
    );

    server.tool(
      "createWorkflowLog",
      "Endpoint to create a new Workflow Log",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for WorkflowLog model. Create",
                        "example": {},
                        "properties": {}
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createWorkflowLog(args);
      }
    );

    server.tool(
      "getWorkflowLog",
      "Endpoint to retrieve a single Workflow Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkflowLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getWorkflowLog(args);
      }
    );

    server.tool(
      "updateWorkflowLog",
      "Endpoint to update an existing Workflow Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Log to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for WorkflowLog model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateWorkflowLog(args);
      }
    );

    server.tool(
      "deleteWorkflowLog",
      "Endpoint to delete a Workflow Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workflow Log to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteWorkflowLog(args);
      }
    );

    server.tool(
      "listStatusPageSSO",
      "Endpoint to list all Status Page SSO items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageSSO. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageSSO. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "signatureMethod": true,
                              "digestMethod": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageSSO. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageSSO(args);
      }
    );

    server.tool(
      "countStatusPageSSO",
      "Endpoint to count Status Page SSO items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageSSO. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageSSO(args);
      }
    );

    server.tool(
      "createStatusPageSSO",
      "Endpoint to create a new Status Page SSO",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageSSO model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "description": "This is an example of longer text content that provides detailed information.",
                              "signatureMethod": "Example Text",
                              "digestMethod": "Example Text",
                              "signOnURL": "https://example.com",
                              "issuerURL": "https://example.com",
                              "publicCertificate": null
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "signatureMethod": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "digestMethod": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "signOnURL": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO, Project User, Public], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "https://www.example.com/path/to/resource?param=value"
                              },
                              "issuerURL": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "https://www.example.com/path/to/resource?param=value"
                              },
                              "publicCertificate": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": true
                              },
                              "isTested": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "statusPageId",
                              "name",
                              "description",
                              "signatureMethod",
                              "digestMethod",
                              "signOnURL",
                              "issuerURL",
                              "publicCertificate"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageSSO(args);
      }
    );

    server.tool(
      "getStatusPageSSO",
      "Endpoint to retrieve a single Status Page SSO by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page SSO to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageSSO. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "signatureMethod": true,
                              "digestMethod": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageSSO(args);
      }
    );

    server.tool(
      "updateStatusPageSSO",
      "Endpoint to update an existing Status Page SSO",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page SSO to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageSSO model. Update",
                        "example": {
                              "name": "Example Text",
                              "description": "This is an example of longer text content that provides detailed information.",
                              "signatureMethod": "Example Text",
                              "digestMethod": "Example Text",
                              "signOnURL": "https://example.com",
                              "issuerURL": "https://example.com",
                              "publicCertificate": null
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "signatureMethod": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "digestMethod": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "Example short text"
                              },
                              "signOnURL": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO, Project User, Public], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "https://www.example.com/path/to/resource?param=value"
                              },
                              "issuerURL": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "https://www.example.com/path/to/resource?param=value"
                              },
                              "publicCertificate": {
                                    "type": "string",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Status Page SSO], Read: [Project Owner, Project Admin, Project User, Public, Read Status Page SSO], Update: [Project Owner, Project Admin, Edit Status Page SSO]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageSSO(args);
      }
    );

    server.tool(
      "deleteStatusPageSSO",
      "Endpoint to delete a Status Page SSO",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page SSO to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageSSO(args);
      }
    );

    server.tool(
      "listMonitorProbe",
      "Endpoint to list all Monitor Probe items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorProbe. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorProbe. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorProbe. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorProbe(args);
      }
    );

    server.tool(
      "countMonitorProbe",
      "Endpoint to count Monitor Probe items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorProbe. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorProbe(args);
      }
    );

    server.tool(
      "createMonitorProbe",
      "Endpoint to create a new Monitor Probe",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorProbe model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "probeId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "probeId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "lastPingAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "nextPingAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Probe]",
                                    "example": true
                              }
                        },
                        "required": [
                              "probeId",
                              "monitorId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorProbe(args);
      }
    );

    server.tool(
      "getMonitorProbe",
      "Endpoint to retrieve a single Monitor Probe by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Probe to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorProbe. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorProbe(args);
      }
    );

    server.tool(
      "updateMonitorProbe",
      "Endpoint to update an existing Monitor Probe",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Probe to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorProbe model. Update",
                        "example": {
                              "isEnabled": true
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isEnabled": {
                                    "type": "boolean",
                                    "description": "Permissions - Create: [Project Owner, Project Admin, Create Monitor Probe], Read: [Project Owner, Project Admin, Project Member, Read Monitor Probe], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Probe]",
                                    "example": true
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorProbe(args);
      }
    );

    server.tool(
      "deleteMonitorProbe",
      "Endpoint to delete a Monitor Probe",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Probe to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorProbe(args);
      }
    );

    server.tool(
      "listMonitorOwnerTeam",
      "Endpoint to list all Monitor Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "countMonitorOwnerTeam",
      "Endpoint to count Monitor Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "createMonitorOwnerTeam",
      "Endpoint to create a new Monitor Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Team Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor Team Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "teamId",
                              "monitorId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "getMonitorOwnerTeam",
      "Endpoint to retrieve a single Monitor Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "updateMonitorOwnerTeam",
      "Endpoint to update an existing Monitor Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "deleteMonitorOwnerTeam",
      "Endpoint to delete a Monitor Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorOwnerTeam(args);
      }
    );

    server.tool(
      "listMonitorOwnerUser",
      "Endpoint to list all Monitor User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorOwnerUser(args);
      }
    );

    server.tool(
      "countMonitorOwnerUser",
      "Endpoint to count Monitor User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorOwnerUser(args);
      }
    );

    server.tool(
      "createMonitorOwnerUser",
      "Endpoint to create a new Monitor User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor User Owner], Read: [Project Owner, Project Admin, Project Member, Read Monitor User Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "userId",
                              "monitorId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorOwnerUser(args);
      }
    );

    server.tool(
      "getMonitorOwnerUser",
      "Endpoint to retrieve a single Monitor User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorOwnerUser(args);
      }
    );

    server.tool(
      "updateMonitorOwnerUser",
      "Endpoint to update an existing Monitor User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorOwnerUser(args);
      }
    );

    server.tool(
      "deleteMonitorOwnerUser",
      "Endpoint to delete a Monitor User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorOwnerUser(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceOwnerTeam",
      "Endpoint to list all Scheduled Maintenance Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceOwnerTeam",
      "Endpoint to count Scheduled Maintenance Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceOwnerTeam",
      "Endpoint to create a new Scheduled Maintenance Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "scheduledMaintenanceId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceOwnerTeam",
      "Endpoint to retrieve a single Scheduled Maintenance Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceOwnerTeam",
      "Endpoint to update an existing Scheduled Maintenance Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceOwnerTeam",
      "Endpoint to delete a Scheduled Maintenance Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceOwnerTeam(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceOwnerUser",
      "Endpoint to list all Scheduled Maintenance User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceOwnerUser",
      "Endpoint to count Scheduled Maintenance User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceOwnerUser",
      "Endpoint to create a new Scheduled Maintenance User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "scheduledMaintenanceId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceOwnerUser",
      "Endpoint to retrieve a single Scheduled Maintenance User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceOwnerUser",
      "Endpoint to update an existing Scheduled Maintenance User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceOwnerUser",
      "Endpoint to delete a Scheduled Maintenance User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceOwnerUser(args);
      }
    );

    server.tool(
      "listStatusPageOwnerTeam",
      "Endpoint to list all Status Page Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "countStatusPageOwnerTeam",
      "Endpoint to count Status Page Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "createStatusPageOwnerTeam",
      "Endpoint to create a new Status Page Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "statusPageId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "getStatusPageOwnerTeam",
      "Endpoint to retrieve a single Status Page Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "updateStatusPageOwnerTeam",
      "Endpoint to update an existing Status Page Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "deleteStatusPageOwnerTeam",
      "Endpoint to delete a Status Page Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageOwnerTeam(args);
      }
    );

    server.tool(
      "listStatusPageOwnerUser",
      "Endpoint to list all Status Page User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for StatusPageOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "countStatusPageOwnerUser",
      "Endpoint to count Status Page User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for StatusPageOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "createStatusPageOwnerUser",
      "Endpoint to create a new Status Page User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for StatusPageOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "statusPageId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "statusPageId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isOwnerNotified": {
                                    "type": "boolean",
                                    "description": "Are owners notified of this resource ownership?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Status Page User Owner], Read: [Project Owner, Project Admin, Project Member, Read Status Page User Owner], Update: [No access - you don't have permission for this operation]",
                                    "example": true
                              }
                        },
                        "required": [
                              "userId",
                              "statusPageId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "getStatusPageOwnerUser",
      "Endpoint to retrieve a single Status Page User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for StatusPageOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "updateStatusPageOwnerUser",
      "Endpoint to update an existing Status Page User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for StatusPageOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "deleteStatusPageOwnerUser",
      "Endpoint to delete a Status Page User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Status Page User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteStatusPageOwnerUser(args);
      }
    );

    server.tool(
      "listSmsLog",
      "Endpoint to list all SMS Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for SmsLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for SmsLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for SmsLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listSmsLog(args);
      }
    );

    server.tool(
      "countSmsLog",
      "Endpoint to count SMS Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for SmsLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countSmsLog(args);
      }
    );

    server.tool(
      "getSmsLog",
      "Endpoint to retrieve a single SMS Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the SMS Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for SmsLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getSmsLog(args);
      }
    );

    server.tool(
      "listCallLog",
      "Endpoint to list all Call Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CallLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CallLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for CallLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listCallLog(args);
      }
    );

    server.tool(
      "countCallLog",
      "Endpoint to count Call Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CallLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countCallLog(args);
      }
    );

    server.tool(
      "getCallLog",
      "Endpoint to retrieve a single Call Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Call Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CallLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getCallLog(args);
      }
    );

    server.tool(
      "listEmailLog",
      "Endpoint to list all Email Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for EmailLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for EmailLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "toEmail": true,
                              "fromEmail": true,
                              "status": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for EmailLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listEmailLog(args);
      }
    );

    server.tool(
      "countEmailLog",
      "Endpoint to count Email Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for EmailLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countEmailLog(args);
      }
    );

    server.tool(
      "getEmailLog",
      "Endpoint to retrieve a single Email Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Email Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for EmailLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "toEmail": true,
                              "fromEmail": true,
                              "status": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getEmailLog(args);
      }
    );

    server.tool(
      "listUserOnCallLog",
      "Endpoint to list all User Notification Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserOnCallLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for UserOnCallLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "status": true,
                              "userNotificationEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for UserOnCallLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listUserOnCallLog(args);
      }
    );

    server.tool(
      "countUserOnCallLog",
      "Endpoint to count User Notification Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserOnCallLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countUserOnCallLog(args);
      }
    );

    server.tool(
      "listUserOnCallLogTimeline",
      "Endpoint to list all User On-Call Log Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserOnCallLogTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for UserOnCallLogTimeline. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "userNotificationEventType": true,
                              "status": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for UserOnCallLogTimeline. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listUserOnCallLogTimeline(args);
      }
    );

    server.tool(
      "countUserOnCallLogTimeline",
      "Endpoint to count User On-Call Log Timeline items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserOnCallLogTimeline. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countUserOnCallLogTimeline(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceTemplate",
      "Endpoint to list all Scheduled Maintenance Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true,
                              "title": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceTemplate",
      "Endpoint to count Scheduled Maintenance Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceTemplate",
      "Endpoint to create a new Scheduled Maintenance Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information.",
                              "title": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Scheduled Maintenance Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Scheduled Maintenance Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this scheduled event.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of this scheduled event that will show up on Status Page. This is a markdown field.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors attached to this event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "List of status pages to show this event on. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "firstEventScheduledAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstEventStartsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstEventEndsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "recurringInterval": {
                                    "type": "object",
                                    "description": "How often should this event recur?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isRecurringEvent": {
                                    "type": "boolean",
                                    "description": "Is this a recurring event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "scheduleNextEventAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnEventCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event creation?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToOngoing": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ongoing?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToEnded": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ended?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendSubscriberNotificationsOnBeforeTheEvent": {
                                    "type": "object",
                                    "description": "Should subscribers be notified before the event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "templateName",
                              "templateDescription",
                              "title"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceTemplate",
      "Endpoint to retrieve a single Scheduled Maintenance Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true,
                              "title": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceTemplate",
      "Endpoint to update an existing Scheduled Maintenance Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceTemplate model. Update",
                        "example": {
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information.",
                              "title": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Scheduled Maintenance Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Scheduled Maintenance Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "title": {
                                    "type": "string",
                                    "description": "Title of this scheduled event.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of this scheduled event that will show up on Status Page. This is a markdown field.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitors": {
                                    "type": "array",
                                    "description": "List of monitors attached to this event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "statusPages": {
                                    "type": "array",
                                    "description": "List of status pages to show this event on. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "changeMonitorStatusToId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "firstEventScheduledAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstEventStartsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstEventEndsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "recurringInterval": {
                                    "type": "object",
                                    "description": "How often should this event recur?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "isRecurringEvent": {
                                    "type": "boolean",
                                    "description": "Is this a recurring event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "scheduleNextEventAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "shouldStatusPageSubscribersBeNotifiedOnEventCreated": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event creation?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToOngoing": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ongoing?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "shouldStatusPageSubscribersBeNotifiedWhenEventChangedToEnded": {
                                    "type": "boolean",
                                    "description": "Should subscribers be notified about this event event is changed to ended?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": true
                              },
                              "customFields": {
                                    "type": "object",
                                    "description": "Custom Fields on this resource.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sendSubscriberNotificationsOnBeforeTheEvent": {
                                    "type": "object",
                                    "description": "Should subscribers be notified before the event?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Template]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceTemplate",
      "Endpoint to delete a Scheduled Maintenance Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceTemplate(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to list all Scheduled Maintenance Template Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplateOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplateOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceTemplateOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to count Scheduled Maintenance Template Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplateOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to create a new Scheduled Maintenance Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceTemplateOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceTemplateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceTemplateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "scheduledMaintenanceTemplateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to retrieve a single Scheduled Maintenance Template Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplateOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to update an existing Scheduled Maintenance Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceTemplateOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceTemplateOwnerTeam",
      "Endpoint to delete a Scheduled Maintenance Template Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceTemplateOwnerTeam(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to list all Scheduled Maintenance Template User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplateOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplateOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceTemplateOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to count Scheduled Maintenance Template User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceTemplateOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to create a new Scheduled Maintenance Template User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceTemplateOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "scheduledMaintenanceTemplateId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "scheduledMaintenanceTemplateId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "scheduledMaintenanceTemplateId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to retrieve a single Scheduled Maintenance Template User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceTemplateOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to update an existing Scheduled Maintenance Template User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceTemplateOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceTemplateOwnerUser",
      "Endpoint to delete a Scheduled Maintenance Template User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Template User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceTemplateOwnerUser(args);
      }
    );

    server.tool(
      "listScheduledMaintenanceNoteTemplate",
      "Endpoint to list all Scheduled Maintenance Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ScheduledMaintenanceNoteTemplate. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "countScheduledMaintenanceNoteTemplate",
      "Endpoint to count Scheduled Maintenance Note Template items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ScheduledMaintenanceNoteTemplate. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "createScheduledMaintenanceNoteTemplate",
      "Endpoint to create a new Scheduled Maintenance Note Template",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ScheduledMaintenanceNoteTemplate model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "templateName",
                              "templateDescription"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "getScheduledMaintenanceNoteTemplate",
      "Endpoint to retrieve a single Scheduled Maintenance Note Template by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Note Template to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ScheduledMaintenanceNoteTemplate. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "templateName": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "updateScheduledMaintenanceNoteTemplate",
      "Endpoint to update an existing Scheduled Maintenance Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Note Template to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ScheduledMaintenanceNoteTemplate model. Update",
                        "example": {
                              "templateName": "Example Text",
                              "templateDescription": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "note": {
                                    "type": "string",
                                    "description": "Note template for public or private notes. This is in markdown.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "templateName": {
                                    "type": "string",
                                    "description": "Name of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "Example short text"
                              },
                              "templateDescription": {
                                    "type": "string",
                                    "description": "Description of the Incident Template. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Scheduled Maintenance Note Template], Read: [Project Owner, Project Admin, Project Member, Read Scheduled Maintenance Note Template], Update: [Project Owner, Project Admin, Project Member, Edit Scheduled Maintenance Note Template]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "deleteScheduledMaintenanceNoteTemplate",
      "Endpoint to delete a Scheduled Maintenance Note Template",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Scheduled Maintenance Note Template to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteScheduledMaintenanceNoteTemplate(args);
      }
    );

    server.tool(
      "listMonitorGroup",
      "Endpoint to list all Monitor Group items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroup. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroup. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorGroup. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorGroup(args);
      }
    );

    server.tool(
      "countMonitorGroup",
      "Endpoint to count Monitor Group items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroup. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorGroup(args);
      }
    );

    server.tool(
      "createMonitorGroup",
      "Endpoint to create a new Monitor Group",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorGroup model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name for this monitor group. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorGroup(args);
      }
    );

    server.tool(
      "getMonitorGroup",
      "Endpoint to retrieve a single Monitor Group by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroup. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorGroup(args);
      }
    );

    server.tool(
      "updateMonitorGroup",
      "Endpoint to update an existing Monitor Group",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorGroup model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name for this monitor group. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Group], Read: [Project Owner, Project Admin, Project Member, Read Monitor Group], Update: [Project Owner, Project Admin, Project Member, Edit Monitor Group]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorGroup(args);
      }
    );

    server.tool(
      "deleteMonitorGroup",
      "Endpoint to delete a Monitor Group",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorGroup(args);
      }
    );

    server.tool(
      "listMonitorGroupOwnerTeam",
      "Endpoint to list all Monitor Group Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorGroupOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "countMonitorGroupOwnerTeam",
      "Endpoint to count Monitor Group Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "createMonitorGroupOwnerTeam",
      "Endpoint to create a new Monitor Group Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorGroupOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorGroupId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "monitorGroupId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "getMonitorGroupOwnerTeam",
      "Endpoint to retrieve a single Monitor Group Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "updateMonitorGroupOwnerTeam",
      "Endpoint to update an existing Monitor Group Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorGroupOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "deleteMonitorGroupOwnerTeam",
      "Endpoint to delete a Monitor Group Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorGroupOwnerTeam(args);
      }
    );

    server.tool(
      "listMonitorGroupOwnerUser",
      "Endpoint to list all Monitor Group User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorGroupOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "countMonitorGroupOwnerUser",
      "Endpoint to count Monitor Group User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "createMonitorGroupOwnerUser",
      "Endpoint to create a new Monitor Group User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorGroupOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorGroupId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "monitorGroupId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "getMonitorGroupOwnerUser",
      "Endpoint to retrieve a single Monitor Group User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "updateMonitorGroupOwnerUser",
      "Endpoint to update an existing Monitor Group User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorGroupOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "deleteMonitorGroupOwnerUser",
      "Endpoint to delete a Monitor Group User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorGroupOwnerUser(args);
      }
    );

    server.tool(
      "listMonitorGroupResource",
      "Endpoint to list all Monitor Group Resource items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupResource. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupResource. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorGroupResource. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorGroupResource(args);
      }
    );

    server.tool(
      "countMonitorGroupResource",
      "Endpoint to count Monitor Group Resource items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorGroupResource. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorGroupResource(args);
      }
    );

    server.tool(
      "createMonitorGroupResource",
      "Endpoint to create a new Monitor Group Resource",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorGroupResource model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorGroupId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorGroupId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "monitorGroupId",
                              "monitorId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorGroupResource(args);
      }
    );

    server.tool(
      "getMonitorGroupResource",
      "Endpoint to retrieve a single Monitor Group Resource by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Resource to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorGroupResource. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorGroupResource(args);
      }
    );

    server.tool(
      "updateMonitorGroupResource",
      "Endpoint to update an existing Monitor Group Resource",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Resource to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MonitorGroupResource model. Update",
                        "example": {
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorGroupResource(args);
      }
    );

    server.tool(
      "deleteMonitorGroupResource",
      "Endpoint to delete a Monitor Group Resource",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Group Resource to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorGroupResource(args);
      }
    );

    server.tool(
      "listTelemetryService",
      "Endpoint to list all Telemetry Service items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryService. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryService. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TelemetryService. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTelemetryService(args);
      }
    );

    server.tool(
      "countTelemetryService",
      "Endpoint to count Telemetry Service items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryService. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTelemetryService(args);
      }
    );

    server.tool(
      "createTelemetryService",
      "Endpoint to create a new Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TelemetryService model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "retainTelemetryDataForDays": {
                                    "type": "number",
                                    "description": "Number of days to retain telemetry data for this service.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": 42
                              },
                              "serviceColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTelemetryService(args);
      }
    );

    server.tool(
      "getTelemetryService",
      "Endpoint to retrieve a single Telemetry Service by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Service to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryService. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTelemetryService(args);
      }
    );

    server.tool(
      "updateTelemetryService",
      "Endpoint to update an existing Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Service to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TelemetryService model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "retainTelemetryDataForDays": {
                                    "type": "number",
                                    "description": "Number of days to retain telemetry data for this service.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Telemetry Service], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Telemetry Service], Update: [Project Owner, Project Admin, Project Member, Edit Telemetry Service]",
                                    "example": 42
                              },
                              "serviceColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTelemetryService(args);
      }
    );

    server.tool(
      "deleteTelemetryService",
      "Endpoint to delete a Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Service to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTelemetryService(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicySchedule",
      "Endpoint to list all On-Call Policy Schedule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicySchedule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicySchedule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicySchedule. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicySchedule",
      "Endpoint to count On-Call Policy Schedule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicySchedule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicySchedule",
      "Endpoint to create a new On-Call Policy Schedule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicySchedule model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "slug": "example-slug"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": "Example short text"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicySchedule",
      "Endpoint to retrieve a single On-Call Policy Schedule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Schedule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicySchedule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicySchedule",
      "Endpoint to update an existing On-Call Policy Schedule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Schedule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicySchedule model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": "Example short text"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Duty Policy Schedule], Read: [Project Owner, Project Admin, Project Member, Read On-Call Duty Policy Schedule], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Duty Policy Schedule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicySchedule",
      "Endpoint to delete a On-Call Policy Schedule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Policy Schedule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicySchedule(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyScheduleLayer",
      "Endpoint to list all On-Call Schedule Layer items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyScheduleLayer. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyScheduleLayer. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyScheduleLayer. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyScheduleLayer",
      "Endpoint to count On-Call Schedule Layer items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyScheduleLayer. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyScheduleLayer",
      "Endpoint to create a new On-Call Schedule Layer",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyScheduleLayer model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyScheduleId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "rotation": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "handOffTime": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "restrictionTimes": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyScheduleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Friendly name for this layer. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description for this layer. This is optional and can be left blank.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this layer. Lower the number, higher the priority.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": 42
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "rotation": {
                                    "type": "object",
                                    "description": "How often would you like to hand off the duty to the next user in this layer?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "handOffTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "restrictionTimes": {
                                    "type": "object",
                                    "description": "Restrict this layer to these times. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "onCallDutyPolicyScheduleId",
                              "name",
                              "startsAt",
                              "handOffTime"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyScheduleLayer",
      "Endpoint to retrieve a single On-Call Schedule Layer by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyScheduleLayer. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyScheduleLayer",
      "Endpoint to update an existing On-Call Schedule Layer",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyScheduleLayer model. Update",
                        "example": {
                              "name": "Example Text",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "rotation": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "handOffTime": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              },
                              "restrictionTimes": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              }
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Friendly name for this layer. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description for this layer. This is optional and can be left blank.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Edit On-Call Schedule Layer]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this layer. Lower the number, higher the priority.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": 42
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "rotation": {
                                    "type": "object",
                                    "description": "How often would you like to hand off the duty to the next user in this layer?. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "handOffTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "restrictionTimes": {
                                    "type": "object",
                                    "description": "Restrict this layer to these times. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyScheduleLayer",
      "Endpoint to delete a On-Call Schedule Layer",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyScheduleLayer(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to list all On-Call Schedule Layer User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyScheduleLayerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyScheduleLayerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyScheduleLayerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to count On-Call Schedule Layer User items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyScheduleLayerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to create a new On-Call Schedule Layer User",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyScheduleLayerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyScheduleId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyScheduleLayerId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyScheduleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyScheduleLayerId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this layer. Lower the number, higher the priority.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": 42
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "onCallDutyPolicyScheduleId",
                              "onCallDutyPolicyScheduleLayerId",
                              "userId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to retrieve a single On-Call Schedule Layer User by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer User to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyScheduleLayerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to update an existing On-Call Schedule Layer User",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer User to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyScheduleLayerUser model. Update",
                        "example": {
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "order": {
                                    "type": "number",
                                    "description": "Order / Priority of this layer. Lower the number, higher the priority.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On-Call Schedule Layer], Read: [Project Owner, Project Admin, Project Member, Read On-Call Schedule Layer], Update: [Project Owner, Project Admin, Project Member, Edit On-Call Schedule Layer]",
                                    "example": 42
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyScheduleLayerUser",
      "Endpoint to delete a On-Call Schedule Layer User",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On-Call Schedule Layer User to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyScheduleLayerUser(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyFeed",
      "Endpoint to list all On Call Duty Policy Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "onCallDutyPolicyFeedEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyFeed. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyFeed(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyFeed",
      "Endpoint to count On Call Duty Policy Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyFeed(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyFeed",
      "Endpoint to create a new On Call Duty Policy Feed",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyFeed model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "feedInfoInMarkdown": null,
                              "onCallDutyPolicyFeedEventType": "Example Text",
                              "displayColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "feedInfoInMarkdown": {
                                    "type": "string",
                                    "description": "Log of the entire onCallDutyPolicy state change in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "moreInformationInMarkdown": {
                                    "type": "string",
                                    "description": "More information in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "onCallDutyPolicyFeedEventType": {
                                    "type": "string",
                                    "description": "On Call Duty Policy Feed Event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create On Call Duty Policy Feed], Read: [Project Owner, Project Admin, Project Member, Read On Call Duty Policy Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "displayColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "feedInfoInMarkdown",
                              "onCallDutyPolicyFeedEventType",
                              "displayColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyFeed(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyFeed",
      "Endpoint to retrieve a single On Call Duty Policy Feed by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On Call Duty Policy Feed to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "onCallDutyPolicyFeedEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyFeed(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyOwnerTeam",
      "Endpoint to list all OnCallDutyPolicy Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyOwnerTeam",
      "Endpoint to count OnCallDutyPolicy Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyOwnerTeam",
      "Endpoint to create a new OnCallDutyPolicy Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "onCallDutyPolicyId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyOwnerTeam",
      "Endpoint to retrieve a single OnCallDutyPolicy Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyOwnerTeam",
      "Endpoint to update an existing OnCallDutyPolicy Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyOwnerTeam",
      "Endpoint to delete a OnCallDutyPolicy Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyOwnerTeam(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyOwnerUser",
      "Endpoint to list all OnCallDutyPolicy User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyOwnerUser",
      "Endpoint to count OnCallDutyPolicy User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyOwnerUser",
      "Endpoint to create a new OnCallDutyPolicy User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "onCallDutyPolicyId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyOwnerUser",
      "Endpoint to retrieve a single OnCallDutyPolicy User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyOwnerUser",
      "Endpoint to update an existing OnCallDutyPolicy User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyOwnerUser",
      "Endpoint to delete a OnCallDutyPolicy User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the OnCallDutyPolicy User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyOwnerUser(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to list all Schedule's On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleSchedule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleSchedule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyEscalationRuleSchedule. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to count Schedule's On-Call Duty Escalation Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyEscalationRuleSchedule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to create a new Schedule's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyEscalationRuleSchedule model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "onCallDutyPolicyEscalationRuleId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyScheduleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyEscalationRuleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "onCallDutyPolicyId",
                              "onCallDutyPolicyEscalationRuleId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to retrieve a single Schedule's On-Call Duty Escalation Rule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Schedule's On-Call Duty Escalation Rule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyEscalationRuleSchedule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to update an existing Schedule's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Schedule's On-Call Duty Escalation Rule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyEscalationRuleSchedule model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyEscalationRuleSchedule",
      "Endpoint to delete a Schedule's On-Call Duty Escalation Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Schedule's On-Call Duty Escalation Rule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyEscalationRuleSchedule(args);
      }
    );

    server.tool(
      "listServiceCatalog",
      "Endpoint to list all Service in Service Catalog items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "serviceLanguage": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatalog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatalog(args);
      }
    );

    server.tool(
      "countServiceCatalog",
      "Endpoint to count Service in Service Catalog items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatalog(args);
      }
    );

    server.tool(
      "createServiceCatalog",
      "Endpoint to create a new Service in Service Catalog",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatalog model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "serviceColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "serviceLanguage": {
                                    "type": "string",
                                    "description": "Language in which this service is written",
                                    "example": "Example short text"
                              },
                              "techStack": {
                                    "type": "object",
                                    "description": "Tech stack used in the service. This will help other developers understand the service better.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatalog(args);
      }
    );

    server.tool(
      "getServiceCatalog",
      "Endpoint to retrieve a single Service in Service Catalog by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service in Service Catalog to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "serviceLanguage": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatalog(args);
      }
    );

    server.tool(
      "updateServiceCatalog",
      "Endpoint to update an existing Service in Service Catalog",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service in Service Catalog to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatalog model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "serviceColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "serviceLanguage": {
                                    "type": "string",
                                    "description": "Language in which this service is written",
                                    "example": "Example short text"
                              },
                              "techStack": {
                                    "type": "object",
                                    "description": "Tech stack used in the service. This will help other developers understand the service better.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Catalog], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Catalog], Update: [Project Owner, Project Admin, Project Member, Edit Service Catalog]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatalog(args);
      }
    );

    server.tool(
      "deleteServiceCatalog",
      "Endpoint to delete a Service in Service Catalog",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service in Service Catalog to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatalog(args);
      }
    );

    server.tool(
      "listServiceCatalogOwnerTeam",
      "Endpoint to list all Service Catalog Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatalogOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "countServiceCatalogOwnerTeam",
      "Endpoint to count Service Catalog Team Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "createServiceCatalogOwnerTeam",
      "Endpoint to create a new Service Catalog Team Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatalogOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "serviceCatalogId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "getServiceCatalogOwnerTeam",
      "Endpoint to retrieve a single Service Catalog Team Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Team Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "updateServiceCatalogOwnerTeam",
      "Endpoint to update an existing Service Catalog Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Team Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatalogOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "deleteServiceCatalogOwnerTeam",
      "Endpoint to delete a Service Catalog Team Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Team Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatalogOwnerTeam(args);
      }
    );

    server.tool(
      "listServiceCatalogOwnerUser",
      "Endpoint to list all Service Catalog User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatalogOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "countServiceCatalogOwnerUser",
      "Endpoint to count Service Catalog User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "createServiceCatalogOwnerUser",
      "Endpoint to create a new Service Catalog User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatalogOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "serviceCatalogId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "getServiceCatalogOwnerUser",
      "Endpoint to retrieve a single Service Catalog User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "updateServiceCatalogOwnerUser",
      "Endpoint to update an existing Service Catalog User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatalogOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "deleteServiceCatalogOwnerUser",
      "Endpoint to delete a Service Catalog User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatalogOwnerUser(args);
      }
    );

    server.tool(
      "listServiceCatlogDependency",
      "Endpoint to list all Service Dependency items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatlogDependency. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatlogDependency. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatlogDependency. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatlogDependency(args);
      }
    );

    server.tool(
      "countServiceCatlogDependency",
      "Endpoint to count Service Dependency items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatlogDependency. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatlogDependency(args);
      }
    );

    server.tool(
      "createServiceCatlogDependency",
      "Endpoint to create a new Service Dependency",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatlogDependency model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "dependencyServiceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "dependencyServiceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "serviceCatalogId",
                              "dependencyServiceCatalogId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatlogDependency(args);
      }
    );

    server.tool(
      "getServiceCatlogDependency",
      "Endpoint to retrieve a single Service Dependency by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Dependency to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatlogDependency. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatlogDependency(args);
      }
    );

    server.tool(
      "updateServiceCatlogDependency",
      "Endpoint to update an existing Service Dependency",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Dependency to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatlogDependency model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatlogDependency(args);
      }
    );

    server.tool(
      "deleteServiceCatlogDependency",
      "Endpoint to delete a Service Dependency",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Dependency to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatlogDependency(args);
      }
    );

    server.tool(
      "listServiceCatalogMonitor",
      "Endpoint to list all Service Catalog Monitor items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogMonitor. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogMonitor. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatalogMonitor. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "countServiceCatalogMonitor",
      "Endpoint to count Service Catalog Monitor items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogMonitor. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "createServiceCatalogMonitor",
      "Endpoint to create a new Service Catalog Monitor",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatalogMonitor model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "serviceCatalogId",
                              "monitorId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "getServiceCatalogMonitor",
      "Endpoint to retrieve a single Service Catalog Monitor by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Monitor to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogMonitor. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "updateServiceCatalogMonitor",
      "Endpoint to update an existing Service Catalog Monitor",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Monitor to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatalogMonitor model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "deleteServiceCatalogMonitor",
      "Endpoint to delete a Service Catalog Monitor",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Monitor to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatalogMonitor(args);
      }
    );

    server.tool(
      "listServiceCatalogTelemetryService",
      "Endpoint to list all Service Catalog Telemetry Service items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogTelemetryService. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogTelemetryService. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCatalogTelemetryService. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "countServiceCatalogTelemetryService",
      "Endpoint to count Service Catalog Telemetry Service items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCatalogTelemetryService. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "createServiceCatalogTelemetryService",
      "Endpoint to create a new Service Catalog Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCatalogTelemetryService model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "telemetryServiceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "telemetryServiceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "serviceCatalogId",
                              "telemetryServiceId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "getServiceCatalogTelemetryService",
      "Endpoint to retrieve a single Service Catalog Telemetry Service by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Telemetry Service to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCatalogTelemetryService. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "updateServiceCatalogTelemetryService",
      "Endpoint to update an existing Service Catalog Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Telemetry Service to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCatalogTelemetryService model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "deleteServiceCatalogTelemetryService",
      "Endpoint to delete a Service Catalog Telemetry Service",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Catalog Telemetry Service to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCatalogTelemetryService(args);
      }
    );

    server.tool(
      "listCopilotCodeRepository",
      "Endpoint to list all Code Repository items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotCodeRepository. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotCodeRepository. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "mainBranchName": true,
                              "repositoryHostedAt": true,
                              "organizationName": true,
                              "repositoryName": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for CopilotCodeRepository. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listCopilotCodeRepository(args);
      }
    );

    server.tool(
      "countCopilotCodeRepository",
      "Endpoint to count Code Repository items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotCodeRepository. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countCopilotCodeRepository(args);
      }
    );

    server.tool(
      "createCopilotCodeRepository",
      "Endpoint to create a new Code Repository",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for CopilotCodeRepository model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "mainBranchName": "Example Text",
                              "repositoryHostedAt": "Example Text",
                              "organizationName": "Example Text",
                              "repositoryName": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "mainBranchName": {
                                    "type": "string",
                                    "description": "Name of the main branch of this repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "repositoryHostedAt": {
                                    "type": "string",
                                    "description": "Where is this repository hosted at? GitHub, GitLab, Bitbucket, etc.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "organizationName": {
                                    "type": "string",
                                    "description": "Name of the organization where this repo belongs. Eg: Your GitHub Organization Name. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "repositoryName": {
                                    "type": "string",
                                    "description": "Name of the repository. Eg: Your GitHub Repository Name. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "lastCopilotRunDateTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "name",
                              "mainBranchName",
                              "repositoryHostedAt",
                              "organizationName",
                              "repositoryName"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createCopilotCodeRepository(args);
      }
    );

    server.tool(
      "getCopilotCodeRepository",
      "Endpoint to retrieve a single Code Repository by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Code Repository to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotCodeRepository. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "mainBranchName": true,
                              "repositoryHostedAt": true,
                              "organizationName": true,
                              "repositoryName": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getCopilotCodeRepository(args);
      }
    );

    server.tool(
      "updateCopilotCodeRepository",
      "Endpoint to update an existing Code Repository",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Code Repository to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for CopilotCodeRepository model. Update",
                        "example": {
                              "name": "Example Text",
                              "mainBranchName": "Example Text",
                              "repositoryHostedAt": "Example Text",
                              "organizationName": "Example Text",
                              "repositoryName": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "mainBranchName": {
                                    "type": "string",
                                    "description": "Name of the main branch of this repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "repositoryHostedAt": {
                                    "type": "string",
                                    "description": "Where is this repository hosted at? GitHub, GitLab, Bitbucket, etc.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "organizationName": {
                                    "type": "string",
                                    "description": "Name of the organization where this repo belongs. Eg: Your GitHub Organization Name. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "repositoryName": {
                                    "type": "string",
                                    "description": "Name of the repository. Eg: Your GitHub Repository Name. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Code Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Code Repository], Update: [Project Owner, Project Admin, Project Member, Edit Code Repository]",
                                    "example": "Example short text"
                              },
                              "lastCopilotRunDateTime": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateCopilotCodeRepository(args);
      }
    );

    server.tool(
      "deleteCopilotCodeRepository",
      "Endpoint to delete a Code Repository",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Code Repository to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteCopilotCodeRepository(args);
      }
    );

    server.tool(
      "listCopilotAction",
      "Endpoint to list all Copilot Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotAction. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotAction. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "copilotActionType": true,
                              "copilotActionStatus": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for CopilotAction. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listCopilotAction(args);
      }
    );

    server.tool(
      "countCopilotAction",
      "Endpoint to count Copilot Event items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotAction. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countCopilotAction(args);
      }
    );

    server.tool(
      "createCopilotAction",
      "Endpoint to create a new Copilot Event",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for CopilotAction model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "codeRepositoryId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceRepositoryId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "codeRepositoryId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "commitHash": {
                                    "type": "string",
                                    "description": "Commit Hash of the commit for this file in Code Repository where this event was triggered. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "copilotActionType": {
                                    "type": "string",
                                    "description": "Type of Copilot Event that was triggered for this file in Code Repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceRepositoryId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "copilotPullRequestId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "copilotActionStatus": {
                                    "type": "string",
                                    "description": "Status of Copilot Event that was triggered for this file in Code Repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "copilotActionProp": {
                                    "type": "object",
                                    "description": "Action Props of Copilot Event that was triggered for this file in Code Repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "statusMessage": {
                                    "type": "string",
                                    "description": "Status Message of Copilot Event that was triggered for this file in Code Repository. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "logs": {
                                    "type": "string",
                                    "description": "Logs. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "isPriority": {
                                    "type": "boolean",
                                    "description": "Is Priority. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [Project Owner, Project Admin, Project Member, Edit Copilot Event]",
                                    "example": true
                              },
                              "statusChangedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "codeRepositoryId",
                              "serviceCatalogId",
                              "serviceRepositoryId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createCopilotAction(args);
      }
    );

    server.tool(
      "getCopilotAction",
      "Endpoint to retrieve a single Copilot Event by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Event to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotAction. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "copilotActionType": true,
                              "copilotActionStatus": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getCopilotAction(args);
      }
    );

    server.tool(
      "updateCopilotAction",
      "Endpoint to update an existing Copilot Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Event to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for CopilotAction model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isPriority": {
                                    "type": "boolean",
                                    "description": "Is Priority. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Copilot Event], Read: [Project Owner, Project Admin, Project Member, Read Copilot Event], Update: [Project Owner, Project Admin, Project Member, Edit Copilot Event]",
                                    "example": true
                              },
                              "statusChangedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateCopilotAction(args);
      }
    );

    server.tool(
      "deleteCopilotAction",
      "Endpoint to delete a Copilot Event",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Event to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteCopilotAction(args);
      }
    );

    server.tool(
      "listServiceCopilotCodeRepository",
      "Endpoint to list all Service Code Repository for Copilot items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCopilotCodeRepository. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCopilotCodeRepository. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ServiceCopilotCodeRepository. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "countServiceCopilotCodeRepository",
      "Endpoint to count Service Code Repository for Copilot items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ServiceCopilotCodeRepository. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "createServiceCopilotCodeRepository",
      "Endpoint to create a new Service Code Repository for Copilot",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ServiceCopilotCodeRepository model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "codeRepositoryId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "servicePathInRepository": {
                                    "type": "string",
                                    "description": "Path in your code repository where this service is located. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "limitNumberOfOpenPullRequestsCount": {
                                    "type": "number",
                                    "description": "Limit Number of Open Pull Requests Count for this service. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": 42
                              },
                              "enablePullRequests": {
                                    "type": "boolean",
                                    "description": "Copilot will automatically improve your code by creating pull requests for this service. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": true
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "codeRepositoryId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "codeRepositoryId",
                              "serviceCatalogId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "getServiceCopilotCodeRepository",
      "Endpoint to retrieve a single Service Code Repository for Copilot by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Code Repository for Copilot to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ServiceCopilotCodeRepository. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "updateServiceCopilotCodeRepository",
      "Endpoint to update an existing Service Code Repository for Copilot",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Code Repository for Copilot to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ServiceCopilotCodeRepository model. Update",
                        "example": {
                              "servicePathInRepository": "This is an example of longer text content that provides detailed information.",
                              "enablePullRequests": true,
                              "codeRepositoryId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "serviceCatalogId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "servicePathInRepository": {
                                    "type": "string",
                                    "description": "Path in your code repository where this service is located. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "limitNumberOfOpenPullRequestsCount": {
                                    "type": "number",
                                    "description": "Limit Number of Open Pull Requests Count for this service. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": 42
                              },
                              "enablePullRequests": {
                                    "type": "boolean",
                                    "description": "Copilot will automatically improve your code by creating pull requests for this service. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Service Repository], Read: [Project Owner, Project Admin, Project Member, Project Member, Read Service Repository], Update: [Project Owner, Project Admin, Project Member, Edit Service Repository]",
                                    "example": true
                              },
                              "codeRepositoryId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "serviceCatalogId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "deleteServiceCopilotCodeRepository",
      "Endpoint to delete a Service Code Repository for Copilot",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Service Code Repository for Copilot to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteServiceCopilotCodeRepository(args);
      }
    );

    server.tool(
      "listCopilotPullRequest",
      "Endpoint to list all Copilot Pull Request items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotPullRequest. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotPullRequest. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "pullRequestId": true,
                              "copilotPullRequestStatus": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for CopilotPullRequest. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listCopilotPullRequest(args);
      }
    );

    server.tool(
      "countCopilotPullRequest",
      "Endpoint to count Copilot Pull Request items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotPullRequest. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countCopilotPullRequest(args);
      }
    );

    server.tool(
      "getCopilotPullRequest",
      "Endpoint to retrieve a single Copilot Pull Request by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Pull Request to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotPullRequest. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "pullRequestId": true,
                              "copilotPullRequestStatus": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getCopilotPullRequest(args);
      }
    );

    server.tool(
      "listCopilotActionType",
      "Endpoint to list all Copilot Action Priority items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotActionType. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotActionType. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "actionType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for CopilotActionType. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listCopilotActionType(args);
      }
    );

    server.tool(
      "countCopilotActionType",
      "Endpoint to count Copilot Action Priority items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for CopilotActionType. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countCopilotActionType(args);
      }
    );

    server.tool(
      "createCopilotActionType",
      "Endpoint to create a new Copilot Action Priority",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for CopilotActionType model. Create",
                        "example": {},
                        "properties": {}
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createCopilotActionType(args);
      }
    );

    server.tool(
      "getCopilotActionType",
      "Endpoint to retrieve a single Copilot Action Priority by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Action Priority to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for CopilotActionType. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "actionType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getCopilotActionType(args);
      }
    );

    server.tool(
      "updateCopilotActionType",
      "Endpoint to update an existing Copilot Action Priority",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Action Priority to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for CopilotActionType model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateCopilotActionType(args);
      }
    );

    server.tool(
      "deleteCopilotActionType",
      "Endpoint to delete a Copilot Action Priority",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Copilot Action Priority to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteCopilotActionType(args);
      }
    );

    server.tool(
      "listProbeOwnerTeam",
      "Endpoint to list all Probe Owner Team items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ProbeOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ProbeOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ProbeOwnerTeam. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listProbeOwnerTeam(args);
      }
    );

    server.tool(
      "countProbeOwnerTeam",
      "Endpoint to count Probe Owner Team items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ProbeOwnerTeam. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countProbeOwnerTeam(args);
      }
    );

    server.tool(
      "createProbeOwnerTeam",
      "Endpoint to create a new Probe Owner Team",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ProbeOwnerTeam model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "teamId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "probeId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "probeId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "teamId",
                              "probeId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createProbeOwnerTeam(args);
      }
    );

    server.tool(
      "getProbeOwnerTeam",
      "Endpoint to retrieve a single Probe Owner Team by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe Owner Team to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ProbeOwnerTeam. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getProbeOwnerTeam(args);
      }
    );

    server.tool(
      "updateProbeOwnerTeam",
      "Endpoint to update an existing Probe Owner Team",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe Owner Team to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ProbeOwnerTeam model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateProbeOwnerTeam(args);
      }
    );

    server.tool(
      "deleteProbeOwnerTeam",
      "Endpoint to delete a Probe Owner Team",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe Owner Team to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteProbeOwnerTeam(args);
      }
    );

    server.tool(
      "listProbeOwnerUser",
      "Endpoint to list all Probe User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ProbeOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ProbeOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ProbeOwnerUser. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listProbeOwnerUser(args);
      }
    );

    server.tool(
      "countProbeOwnerUser",
      "Endpoint to count Probe User Owner items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ProbeOwnerUser. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countProbeOwnerUser(args);
      }
    );

    server.tool(
      "createProbeOwnerUser",
      "Endpoint to create a new Probe User Owner",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ProbeOwnerUser model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "probeId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "probeId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "userId",
                              "probeId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createProbeOwnerUser(args);
      }
    );

    server.tool(
      "getProbeOwnerUser",
      "Endpoint to retrieve a single Probe User Owner by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe User Owner to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ProbeOwnerUser. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getProbeOwnerUser(args);
      }
    );

    server.tool(
      "updateProbeOwnerUser",
      "Endpoint to update an existing Probe User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe User Owner to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for ProbeOwnerUser model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateProbeOwnerUser(args);
      }
    );

    server.tool(
      "deleteProbeOwnerUser",
      "Endpoint to delete a Probe User Owner",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Probe User Owner to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteProbeOwnerUser(args);
      }
    );

    server.tool(
      "listUserTwoFactorAuth",
      "Endpoint to list all Two Factor Auth items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserTwoFactorAuth. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for UserTwoFactorAuth. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for UserTwoFactorAuth. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listUserTwoFactorAuth(args);
      }
    );

    server.tool(
      "countUserTwoFactorAuth",
      "Endpoint to count Two Factor Auth items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for UserTwoFactorAuth. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countUserTwoFactorAuth(args);
      }
    );

    server.tool(
      "listTelemetryIngestionKey",
      "Endpoint to list all Telemetry Ingestion Key items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryIngestionKey. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryIngestionKey. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TelemetryIngestionKey. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "countTelemetryIngestionKey",
      "Endpoint to count Telemetry Ingestion Key items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryIngestionKey. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "createTelemetryIngestionKey",
      "Endpoint to create a new Telemetry Ingestion Key",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TelemetryIngestionKey model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "getTelemetryIngestionKey",
      "Endpoint to retrieve a single Telemetry Ingestion Key by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Ingestion Key to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryIngestionKey. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "updateTelemetryIngestionKey",
      "Endpoint to update an existing Telemetry Ingestion Key",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Ingestion Key to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TelemetryIngestionKey model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Ingestion Key], Read: [Project Owner, Project Admin, Read Telemetry Ingestion Key], Update: [Project Owner, Project Admin, Edit Telemetry Ingestion Key]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "deleteTelemetryIngestionKey",
      "Endpoint to delete a Telemetry Ingestion Key",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Ingestion Key to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTelemetryIngestionKey(args);
      }
    );

    server.tool(
      "listTelemetryException",
      "Endpoint to list all Exception items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryException. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryException. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "fingerprint": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TelemetryException. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTelemetryException(args);
      }
    );

    server.tool(
      "countTelemetryException",
      "Endpoint to count Exception items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryException. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTelemetryException(args);
      }
    );

    server.tool(
      "createTelemetryException",
      "Endpoint to create a new Exception",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TelemetryException model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "telemetryServiceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "telemetryServiceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "message": {
                                    "type": "string",
                                    "description": "Exception message that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "stackTrace": {
                                    "type": "string",
                                    "description": "Stack trace of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "exceptionType": {
                                    "type": "string",
                                    "description": "Type of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "fingerprint": {
                                    "type": "string",
                                    "description": "Finger print of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "Example short text"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsResolvedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "markedAsArchivedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstSeenAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "lastSeenAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "assignToUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "assignToTeamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsResolvedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsArchivedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isResolved": {
                                    "type": "boolean",
                                    "description": "Is this exception resolved?. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": true
                              },
                              "isArchived": {
                                    "type": "boolean",
                                    "description": "Is this exception archived?. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": true
                              },
                              "occuranceCount": {
                                    "type": "number",
                                    "description": "Number of times this exception has occured. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "telemetryServiceId"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTelemetryException(args);
      }
    );

    server.tool(
      "getTelemetryException",
      "Endpoint to retrieve a single Exception by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryException. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "fingerprint": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTelemetryException(args);
      }
    );

    server.tool(
      "updateTelemetryException",
      "Endpoint to update an existing Exception",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TelemetryException model. Update",
                        "example": {
                              "telemetryServiceId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "isResolved": true,
                              "isArchived": true,
                              "occuranceCount": 42
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "telemetryServiceId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "message": {
                                    "type": "string",
                                    "description": "Exception message that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "stackTrace": {
                                    "type": "string",
                                    "description": "Stack trace of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "exceptionType": {
                                    "type": "string",
                                    "description": "Type of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "fingerprint": {
                                    "type": "string",
                                    "description": "Finger print of the exception that was thrown by the telemetry service. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": "Example short text"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsResolvedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "markedAsArchivedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "firstSeenAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "lastSeenAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "assignToUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "assignToTeamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsResolvedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "markedAsArchivedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "isResolved": {
                                    "type": "boolean",
                                    "description": "Is this exception resolved?. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": true
                              },
                              "isArchived": {
                                    "type": "boolean",
                                    "description": "Is this exception archived?. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": true
                              },
                              "occuranceCount": {
                                    "type": "number",
                                    "description": "Number of times this exception has occured. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Exception], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Exception], Update: [Project Owner, Project Admin, Edit Telemetry Service Exception]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTelemetryException(args);
      }
    );

    server.tool(
      "deleteTelemetryException",
      "Endpoint to delete a Exception",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTelemetryException(args);
      }
    );

    server.tool(
      "listTableView",
      "Endpoint to list all Table View items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TableView. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TableView. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "tableId": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TableView. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTableView(args);
      }
    );

    server.tool(
      "countTableView",
      "Endpoint to count Table View items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TableView. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTableView(args);
      }
    );

    server.tool(
      "createTableView",
      "Endpoint to create a new Table View",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TableView model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "tableId": "Example Text",
                              "query": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "sort": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "itemsOnPage": 42
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "Example short text"
                              },
                              "tableId": {
                                    "type": "string",
                                    "description": "ID of the table this view is for. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "query": {
                                    "type": "object",
                                    "description": "Filters for this table view. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sort": {
                                    "type": "object",
                                    "description": "Sort for this table view. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "itemsOnPage": {
                                    "type": "number",
                                    "description": "Items on page. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": 42
                              }
                        },
                        "required": [
                              "name",
                              "tableId",
                              "itemsOnPage"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTableView(args);
      }
    );

    server.tool(
      "getTableView",
      "Endpoint to retrieve a single Table View by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Table View to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TableView. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true,
                              "tableId": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTableView(args);
      }
    );

    server.tool(
      "updateTableView",
      "Endpoint to update an existing Table View",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Table View to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for TableView model. Update",
                        "example": {
                              "name": "Example Text",
                              "tableId": "Example Text",
                              "query": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "sort": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "itemsOnPage": 42
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "Example short text"
                              },
                              "tableId": {
                                    "type": "string",
                                    "description": "ID of the table this view is for. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "query": {
                                    "type": "object",
                                    "description": "Filters for this table view. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "sort": {
                                    "type": "object",
                                    "description": "Sort for this table view. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "itemsOnPage": {
                                    "type": "number",
                                    "description": "Items on page. Permissions - Create: [Project Owner, Project Admin, Create Table View], Read: [Project Owner, Project Admin, Project Member, Read Table View], Update: [Project Owner, Project Admin, Edit Table View]",
                                    "example": 42
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTableView(args);
      }
    );

    server.tool(
      "deleteTableView",
      "Endpoint to delete a Table View",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Table View to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTableView(args);
      }
    );

    server.tool(
      "listDashboard",
      "Endpoint to list all Dashboard items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Dashboard. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Dashboard. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for Dashboard. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listDashboard(args);
      }
    );

    server.tool(
      "countDashboard",
      "Endpoint to count Dashboard items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for Dashboard. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countDashboard(args);
      }
    );

    server.tool(
      "createDashboard",
      "Endpoint to create a new Dashboard",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for Dashboard model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text",
                              "dashboardViewConfig": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Project Member, Edit Dashboard]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "dashboardViewConfig": {
                                    "type": "object",
                                    "description": "Configuration of Dashboard View. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createDashboard(args);
      }
    );

    server.tool(
      "getDashboard",
      "Endpoint to retrieve a single Dashboard by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Dashboard to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for Dashboard. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getDashboard(args);
      }
    );

    server.tool(
      "updateDashboard",
      "Endpoint to update an existing Dashboard",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Dashboard to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for Dashboard model. Update",
                        "example": {
                              "name": "Example Text",
                              "dashboardViewConfig": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              }
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Friendly description that will help you remember. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "labels": {
                                    "type": "array",
                                    "description": "Relation to Labels Array where this object is categorized in.. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Project Member, Edit Dashboard]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "dashboardViewConfig": {
                                    "type": "object",
                                    "description": "Configuration of Dashboard View. Permissions - Create: [Project Owner, Project Admin, Create Dashboard], Read: [Project Owner, Project Admin, Project Member, Read Dashboard], Update: [Project Owner, Project Admin, Edit Dashboard]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateDashboard(args);
      }
    );

    server.tool(
      "deleteDashboard",
      "Endpoint to delete a Dashboard",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Dashboard to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteDashboard(args);
      }
    );

    server.tool(
      "listWorkspaceNotificationRule",
      "Endpoint to list all Workspace Notification Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkspaceNotificationRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkspaceNotificationRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "eventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for WorkspaceNotificationRule. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "countWorkspaceNotificationRule",
      "Endpoint to count Workspace Notification Rule items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for WorkspaceNotificationRule. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "createWorkspaceNotificationRule",
      "Endpoint to create a new Workspace Notification Rule",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for WorkspaceNotificationRule model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "This is an example of longer text content that provides detailed information.",
                              "notificationRule": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "eventType": "Example Text",
                              "workspaceType": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Name of the Notification Rule. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of the Notification Rule. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "notificationRule": {
                                    "type": "object",
                                    "description": "Notification Rules for the Workspace. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "eventType": {
                                    "type": "string",
                                    "description": "Event Type for the Workspace like Incident Created, Monitor Status Updated, etc.. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "Example short text"
                              },
                              "workspaceType": {
                                    "type": "string",
                                    "description": "Type of Workspace - slack, microsoft teams etc.. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name",
                              "eventType",
                              "workspaceType"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "getWorkspaceNotificationRule",
      "Endpoint to retrieve a single Workspace Notification Rule by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workspace Notification Rule to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for WorkspaceNotificationRule. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "eventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "updateWorkspaceNotificationRule",
      "Endpoint to update an existing Workspace Notification Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workspace Notification Rule to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for WorkspaceNotificationRule model. Update",
                        "example": {
                              "name": "This is an example of longer text content that provides detailed information.",
                              "notificationRule": {
                                    "key": "value",
                                    "nested": {
                                          "data": 123
                                    }
                              },
                              "eventType": "Example Text",
                              "workspaceType": "This is an example of longer text content that provides detailed information."
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Name of the Notification Rule. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Description of the Notification Rule. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "notificationRule": {
                                    "type": "object",
                                    "description": "Notification Rules for the Workspace. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": {
                                          "key": "value",
                                          "nested": {
                                                "data": 123
                                          }
                                    }
                              },
                              "eventType": {
                                    "type": "string",
                                    "description": "Event Type for the Workspace like Incident Created, Monitor Status Updated, etc.. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "Example short text"
                              },
                              "workspaceType": {
                                    "type": "string",
                                    "description": "Type of Workspace - slack, microsoft teams etc.. Permissions - Create: [Project Admin, Project Owner, Project Member, Create Workspace Notification Rule], Read: [Project Admin, Project Owner, Project Member, Read Workspace Notification Rule], Update: [Project Admin, Project Owner, Project Member, Edit Workspace Notification Rule]",
                                    "example": "This is an example of longer text content that might be stored in this field."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "deletedByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "deleteWorkspaceNotificationRule",
      "Endpoint to delete a Workspace Notification Rule",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Workspace Notification Rule to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteWorkspaceNotificationRule(args);
      }
    );

    server.tool(
      "listMonitorFeed",
      "Endpoint to list all Monitor Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "monitorFeedEventType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorFeed. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorFeed(args);
      }
    );

    server.tool(
      "countMonitorFeed",
      "Endpoint to count Monitor Feed items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorFeed. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorFeed(args);
      }
    );

    server.tool(
      "createMonitorFeed",
      "Endpoint to create a new Monitor Feed",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorFeed model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "monitorId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "feedInfoInMarkdown": null,
                              "monitorFeedEventType": "Example Text",
                              "displayColor": "#FF0000"
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "monitorId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "feedInfoInMarkdown": {
                                    "type": "string",
                                    "description": "Log of the entire monitor state change in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "moreInformationInMarkdown": {
                                    "type": "string",
                                    "description": "More information in Markdown. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "# Heading\n\nThis is **markdown** content"
                              },
                              "monitorFeedEventType": {
                                    "type": "string",
                                    "description": "Monitor Feed Event. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Monitor Feed], Read: [Project Owner, Project Admin, Project Member, Read Monitor Feed], Update: [No access - you don't have permission for this operation]",
                                    "example": "Example short text"
                              },
                              "displayColor": {
                                    "type": "object",
                                    "description": "Color object",
                                    "example": {
                                          "_type": "Color",
                                          "value": "#ff0000"
                                    }
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "postedAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "monitorId",
                              "feedInfoInMarkdown",
                              "monitorFeedEventType",
                              "displayColor"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorFeed(args);
      }
    );

    server.tool(
      "getMonitorFeed",
      "Endpoint to retrieve a single Monitor Feed by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Feed to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorFeed. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "monitorFeedEventType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorFeed(args);
      }
    );

    server.tool(
      "listMetricType",
      "Endpoint to list all Metric Type items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MetricType. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MetricType. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MetricType. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMetricType(args);
      }
    );

    server.tool(
      "countMetricType",
      "Endpoint to count Metric Type items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MetricType. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMetricType(args);
      }
    );

    server.tool(
      "createMetricType",
      "Endpoint to create a new Metric Type",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MetricType model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "name": "Example Text"
                        },
                        "properties": {
                              "telemetryServices": {
                                    "type": "array",
                                    "description": "List of services this metric is related to. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Metric description. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "unit": {
                                    "type": "string",
                                    "description": "Metric description. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        },
                        "required": [
                              "name"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMetricType(args);
      }
    );

    server.tool(
      "getMetricType",
      "Endpoint to retrieve a single Metric Type by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric Type to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MetricType. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true,
                              "name": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMetricType(args);
      }
    );

    server.tool(
      "updateMetricType",
      "Endpoint to update an existing Metric Type",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric Type to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for MetricType model. Update",
                        "example": {
                              "name": "Example Text"
                        },
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "telemetryServices": {
                                    "type": "array",
                                    "description": "List of services this metric is related to. Permissions - Create: [Project Owner, Project Admin, Project Member, Create Incident], Read: [Project Owner, Project Admin, Project Member, Read Incident], Update: [Project Owner, Project Admin, Project Member, Edit Incident]",
                                    "example": [
                                          {
                                                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                                          }
                                    ],
                                    "items": {
                                          "type": "object",
                                          "properties": {
                                                "id": {
                                                      "type": "string"
                                                }
                                          }
                                    }
                              },
                              "name": {
                                    "type": "string",
                                    "description": "Any friendly name of this object. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "Example short text"
                              },
                              "description": {
                                    "type": "string",
                                    "description": "Metric description. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "unit": {
                                    "type": "string",
                                    "description": "Metric description. Permissions - Create: [Project Owner, Project Admin, Create Telemetry Service Metrics], Read: [Project Owner, Project Admin, Project Member, Read Telemetry Service Metrics], Update: [Project Owner, Project Admin, Edit Telemetry Service Metrics]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMetricType(args);
      }
    );

    server.tool(
      "deleteMetricType",
      "Endpoint to delete a Metric Type",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric Type to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMetricType(args);
      }
    );

    server.tool(
      "listOnCallDutyPolicyTimeLog",
      "Endpoint to list all On Call Time Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyTimeLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyTimeLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for OnCallDutyPolicyTimeLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "countOnCallDutyPolicyTimeLog",
      "Endpoint to count On Call Time Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for OnCallDutyPolicyTimeLog. Each field can use various operators based on its data type.",
                        "example": {
                              "_id": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "createdAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "updatedAt": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "createOnCallDutyPolicyTimeLog",
      "Endpoint to create a new On Call Time Log",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for OnCallDutyPolicyTimeLog model. Create",
                        "example": {
                              "projectId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "userId": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                              "startsAt": {
                                    "_type": "DateTime",
                                    "value": "2023-10-01T12:00:00Z"
                              }
                        },
                        "properties": {
                              "projectId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyScheduleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "onCallDutyPolicyEscalationRuleId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "teamId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "moreInfo": {
                                    "type": "string",
                                    "description": "More information about this log record.. Permissions - Create: [Project Owner, Project Admin, Project Member], Read: [Project Owner, Project Admin, Project Member, Create On-Call Policy Time Log], Update: [No access - you don't have permission for this operation]",
                                    "example": "This is an example of very long text content that might be stored in this field. It can contain a lot of information, such as detailed descriptions, comments, or any other lengthy text data that needs to be stored in the database."
                              },
                              "createdByUserId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "userId": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              },
                              "startsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              },
                              "endsAt": {
                                    "type": "object",
                                    "description": "A date time object.",
                                    "example": {
                                          "_type": "DateTime",
                                          "value": "2023-10-01T12:00:00Z"
                                    }
                              }
                        },
                        "required": [
                              "userId",
                              "startsAt"
                        ]
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "getOnCallDutyPolicyTimeLog",
      "Endpoint to retrieve a single On Call Time Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On Call Time Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for OnCallDutyPolicyTimeLog. Set fields to true to include them in the response.",
                        "example": {
                              "_id": true,
                              "createdAt": true,
                              "updatedAt": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "updateOnCallDutyPolicyTimeLog",
      "Endpoint to update an existing On Call Time Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On Call Time Log to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Update schema for OnCallDutyPolicyTimeLog model. Update",
                        "example": {},
                        "properties": {
                              "_id": {
                                    "type": "string",
                                    "description": "A unique identifier for an object, represented as a UUID.",
                                    "example": "123e4567-e89b-12d3-a456-426614174000",
                                    "format": "uuid"
                              }
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "deleteOnCallDutyPolicyTimeLog",
      "Endpoint to delete a On Call Time Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the On Call Time Log to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteOnCallDutyPolicyTimeLog(args);
      }
    );

    server.tool(
      "listLogItem",
      "Endpoint to list all Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for LogItem. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "severityText": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for LogItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "time": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for LogItem. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for LogItem. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listLogItem(args);
      }
    );

    server.tool(
      "countLogItem",
      "Endpoint to count Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for LogItem. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "severityText": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countLogItem(args);
      }
    );

    server.tool(
      "createLogItem",
      "Endpoint to create a new Log",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for LogItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createLogItem(args);
      }
    );

    server.tool(
      "getLogItem",
      "Endpoint to retrieve a single Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for LogItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "time": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getLogItem(args);
      }
    );

    server.tool(
      "updateLogItem",
      "Endpoint to update an existing Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Log to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for LogItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateLogItem(args);
      }
    );

    server.tool(
      "deleteLogItem",
      "Endpoint to delete a Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Log to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteLogItem(args);
      }
    );

    server.tool(
      "listSpanItem",
      "Endpoint to list all Span items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for SpanItem. Each field can use various operators based on its data type.",
                        "example": {
                              "startTime": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "endTime": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for SpanItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "startTime": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for SpanItem. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for SpanItem. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listSpanItem(args);
      }
    );

    server.tool(
      "countSpanItem",
      "Endpoint to count Span items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for SpanItem. Each field can use various operators based on its data type.",
                        "example": {
                              "startTime": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "endTime": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countSpanItem(args);
      }
    );

    server.tool(
      "createSpanItem",
      "Endpoint to create a new Span",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for SpanItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "startTime": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createSpanItem(args);
      }
    );

    server.tool(
      "getSpanItem",
      "Endpoint to retrieve a single Span by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Span to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for SpanItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "startTime": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getSpanItem(args);
      }
    );

    server.tool(
      "updateSpanItem",
      "Endpoint to update an existing Span",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Span to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for SpanItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "startTime": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateSpanItem(args);
      }
    );

    server.tool(
      "deleteSpanItem",
      "Endpoint to delete a Span",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Span to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteSpanItem(args);
      }
    );

    server.tool(
      "listMetricItem",
      "Endpoint to list all Metric items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MetricItem. Each field can use various operators based on its data type.",
                        "example": {
                              "serviceType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              },
                              "name": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MetricItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "serviceType": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MetricItem. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for MetricItem. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMetricItem(args);
      }
    );

    server.tool(
      "countMetricItem",
      "Endpoint to count Metric items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MetricItem. Each field can use various operators based on its data type.",
                        "example": {
                              "serviceType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              },
                              "name": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMetricItem(args);
      }
    );

    server.tool(
      "createMetricItem",
      "Endpoint to create a new Metric",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MetricItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceType": "example text"
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMetricItem(args);
      }
    );

    server.tool(
      "getMetricItem",
      "Endpoint to retrieve a single Metric by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MetricItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "serviceType": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMetricItem(args);
      }
    );

    server.tool(
      "updateMetricItem",
      "Endpoint to update an existing Metric",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for MetricItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceType": "example text"
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMetricItem(args);
      }
    );

    server.tool(
      "deleteMetricItem",
      "Endpoint to delete a Metric",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Metric to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMetricItem(args);
      }
    );

    server.tool(
      "listTelemetryAttribute",
      "Endpoint to list all Telemetry Attribute items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryAttribute. Each field can use various operators based on its data type.",
                        "example": {
                              "telemetryType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryAttribute. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "telemetryType": true,
                              "attributes": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for TelemetryAttribute. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for TelemetryAttribute. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listTelemetryAttribute(args);
      }
    );

    server.tool(
      "countTelemetryAttribute",
      "Endpoint to count Telemetry Attribute items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for TelemetryAttribute. Each field can use various operators based on its data type.",
                        "example": {
                              "telemetryType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countTelemetryAttribute(args);
      }
    );

    server.tool(
      "createTelemetryAttribute",
      "Endpoint to create a new Telemetry Attribute",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for TelemetryAttribute",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "telemetryType": "example text",
                              "attributes": [
                                    {
                                          "key": "value"
                                    }
                              ]
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createTelemetryAttribute(args);
      }
    );

    server.tool(
      "getTelemetryAttribute",
      "Endpoint to retrieve a single Telemetry Attribute by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Attribute to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for TelemetryAttribute. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "telemetryType": true,
                              "attributes": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getTelemetryAttribute(args);
      }
    );

    server.tool(
      "updateTelemetryAttribute",
      "Endpoint to update an existing Telemetry Attribute",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Attribute to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for TelemetryAttribute",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "telemetryType": "example text",
                              "attributes": [
                                    {
                                          "key": "value"
                                    }
                              ]
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateTelemetryAttribute(args);
      }
    );

    server.tool(
      "deleteTelemetryAttribute",
      "Endpoint to delete a Telemetry Attribute",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Telemetry Attribute to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteTelemetryAttribute(args);
      }
    );

    server.tool(
      "listExceptionItem",
      "Endpoint to list all Exception Instance items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ExceptionItem. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "exceptionType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ExceptionItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "time": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for ExceptionItem. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for ExceptionItem. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listExceptionItem(args);
      }
    );

    server.tool(
      "countExceptionItem",
      "Endpoint to count Exception Instance items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for ExceptionItem. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              },
                              "exceptionType": {
                                    "_type": "EqualTo",
                                    "value": "example text"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countExceptionItem(args);
      }
    );

    server.tool(
      "createExceptionItem",
      "Endpoint to create a new Exception Instance",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for ExceptionItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createExceptionItem(args);
      }
    );

    server.tool(
      "getExceptionItem",
      "Endpoint to retrieve a single Exception Instance by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception Instance to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for ExceptionItem. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "serviceId": true,
                              "time": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getExceptionItem(args);
      }
    );

    server.tool(
      "updateExceptionItem",
      "Endpoint to update an existing Exception Instance",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception Instance to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for ExceptionItem",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "serviceId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateExceptionItem(args);
      }
    );

    server.tool(
      "deleteExceptionItem",
      "Endpoint to delete a Exception Instance",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Exception Instance to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteExceptionItem(args);
      }
    );

    server.tool(
      "listMonitorLog",
      "Endpoint to list all Monitor Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorLog. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorLog. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "monitorId": true,
                              "time": true
                        }
                  },
                  "sort": {
                        "type": "object",
                        "description": "Sort schema for MonitorLog. Only sortable fields are included.",
                        "example": {
                              "createdAt": "DESC"
                        }
                  },
                  "groupBy": {
                        "type": "object",
                        "description": "Group by schema for MonitorLog. Only one field can be set to true for grouping.",
                        "example": {
                              "projectId": true
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.listMonitorLog(args);
      }
    );

    server.tool(
      "countMonitorLog",
      "Endpoint to count Monitor Log items",
            {
            "type": "object",
            "properties": {
                  "query": {
                        "type": "object",
                        "description": "Query schema for MonitorLog. Each field can use various operators based on its data type.",
                        "example": {
                              "time": {
                                    "_type": "GreaterThan",
                                    "value": "2023-01-01T00:00:00.000Z"
                              }
                        }
                  }
            }
      },
      async (args: any) => {
        return await this.countMonitorLog(args);
      }
    );

    server.tool(
      "createMonitorLog",
      "Endpoint to create a new Monitor Log",
            {
            "type": "object",
            "properties": {
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorLog",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "monitorId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "data"
            ]
      },
      async (args: any) => {
        return await this.createMonitorLog(args);
      }
    );

    server.tool(
      "getMonitorLog",
      "Endpoint to retrieve a single Monitor Log by ID",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Log to retrieve"
                  },
                  "select": {
                        "type": "object",
                        "description": "Select schema for MonitorLog. Set fields to true to include them in the response.",
                        "example": {
                              "projectId": true,
                              "monitorId": true,
                              "time": true
                        }
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.getMonitorLog(args);
      }
    );

    server.tool(
      "updateMonitorLog",
      "Endpoint to update an existing Monitor Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Log to update"
                  },
                  "data": {
                        "type": "object",
                        "description": "Create schema for MonitorLog",
                        "example": {
                              "projectId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "monitorId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                              "time": "2023-01-15T12:30:00.000Z"
                        }
                  }
            },
            "required": [
                  "id",
                  "data"
            ]
      },
      async (args: any) => {
        return await this.updateMonitorLog(args);
      }
    );

    server.tool(
      "deleteMonitorLog",
      "Endpoint to delete a Monitor Log",
            {
            "type": "object",
            "properties": {
                  "id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the Monitor Log to delete"
                  }
            },
            "required": [
                  "id"
            ]
      },
      async (args: any) => {
        return await this.deleteMonitorLog(args);
      }
    );
  }

  private async listUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/probe/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/probe/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/project/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/project/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/project",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/project/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/project/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteProject(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/project/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-member/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-member/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-member",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-member/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/team-member/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTeamMember(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/team-member/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-permission/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-permission/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-permission",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/team-permission/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/team-permission/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTeamPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/team-permission/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/api-key/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteApiKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/api-key/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/label/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/label/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/label",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/label/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/label/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteLabel(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/label/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key-permission/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key-permission/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key-permission",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/api-key-permission/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/api-key-permission/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteApiKeyPermission(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/api-key-permission/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPage(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicy(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-esclation-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyEscalationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-esclation-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-esclation-rule-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyEscalationRuleTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-esclation-rule-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-esclation-rule-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyEscalationRuleUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-esclation-rule-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyExecutionLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyExecutionLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyExecutionLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyExecutionLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyExecutionLogTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyExecutionLogTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyExecutionLogTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-execution-log-timeline/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-user-override/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-user-override/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-user-override",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-user-override/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-user-override/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyUserOverride(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-user-override/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-secret/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-secret/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-secret",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-secret/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-secret/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorSecret(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-secret/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-status/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorStatus(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-status/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncident(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-feed/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-feed/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-feed",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-feed/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state-timeline",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-state-timeline/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-internal-note/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-internal-note/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-internal-note",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-internal-note/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-internal-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-internal-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-public-note/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-public-note/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-public-note",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-public-note/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-public-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentPublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-public-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-templates/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-templates/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-templates",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-templates/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-templates/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-templates/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-template-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-template-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-template-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-template-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-template-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-severity/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-severity/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-severity",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-severity/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-severity/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-severity/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-note-template/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-note-template/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-note-template",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/incident-note-template/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/incident-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteIncidentNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/incident-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlert(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-feed/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-feed/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-feed",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-feed/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state-timeline",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-state-timeline/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-internal-note/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-internal-note/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-internal-note",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-internal-note/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-internal-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertInternalNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-internal-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-severity/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-severity/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-severity",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-severity/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-severity/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertSeverity(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-severity/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-note-template/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-note-template/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-note-template",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/alert-note-template/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/alert-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteAlertNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/alert-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status-timeline",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-status-timeline/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-status-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorStatusTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-status-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/domain/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/domain/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/domain",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/domain/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/domain/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/domain/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-group/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-group/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-group",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-group/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-group/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-group/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-domain/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-domain/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-domain",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-domain/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-domain/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageDomain(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-domain/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-resource/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-resource/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-resource",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-resource/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-resource/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-resource/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-announcement/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageAnnouncement(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-announcement/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement-template/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement-template/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement-template",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-announcement-template/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-announcement-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageAnnouncementTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-announcement-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-subscriber/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-subscriber/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-subscriber",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-subscriber/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-subscriber/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageSubscriber(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-subscriber/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-footer-link/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-footer-link/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-footer-link",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-footer-link/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-footer-link/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageFooterLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-footer-link/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-header-link/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-header-link/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-header-link",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-header-link/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-header-link/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageHeaderLink(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-header-link/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-private-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-private-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-private-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-private-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-private-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPagePrivateUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-private-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-history-chart-bar-color-rule/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-history-chart-bar-color-rule/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-history-chart-bar-color-rule",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-history-chart-bar-color-rule/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-history-chart-bar-color-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageHistoryChartBarColorRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-history-chart-bar-color-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceState(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-state/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenance(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state-timeline",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-state-timeline/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceStateTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-state-timeline/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-public-note/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-public-note/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-public-note",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-public-note/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-public-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenancePublicNote(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-public-note/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-custom-field/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-custom-field/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-custom-field",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-custom-field/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceCustomField(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-custom-field/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-feed/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-feed/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-feed",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-feed/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/workflow/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteWorkflow(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/workflow/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-variable/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-variable/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-variable",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-variable/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/workflow-variable/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteWorkflowVariable(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/workflow-variable/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-log",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workflow-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/workflow-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteWorkflowLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/workflow-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-sso/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-sso/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-sso",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-sso/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-sso/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageSSO(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-sso/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-probe/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-probe/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-probe",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-probe/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-probe/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorProbe(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-probe/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/status-page-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/status-page-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteStatusPageOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/status-page-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listSmsLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/sms-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countSmsLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/sms-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getSmsLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/sms-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listCallLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/call-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countCallLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/call-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getCallLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/call-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listEmailLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/email-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countEmailLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/email-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getEmailLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/email-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listUserOnCallLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-notification-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countUserOnCallLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-notification-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listUserOnCallLogTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-notification-log-timeline/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countUserOnCallLogTimeline(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-notification-log-timeline/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-template-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceTemplateOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-template-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template--owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template--owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template--owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-template--owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-template--owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceTemplateOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-template--owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-note-template/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-note-template/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-note-template",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/scheduled-maintenance-note-template/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/scheduled-maintenance-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteScheduledMaintenanceNoteTemplate(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/scheduled-maintenance-note-template/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-group/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorGroup(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-group/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-group-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorGroupOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-group-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-group-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorGroupOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-group-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-resource/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-resource/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-resource",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-group-resource/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-group-resource/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorGroupResource(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-group-resource/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-service/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-service/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-service",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-service/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/telemetry-service/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/telemetry-service/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-schedule/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-schedule/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-schedule",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-schedule/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-schedule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicySchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-schedule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-schedule-layer/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyScheduleLayer(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-schedule-layer/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-schedule-layer-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-schedule-layer-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyScheduleLayerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-schedule-layer-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-feed/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-feed/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-feed",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-feed/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/onCallDutyPolicy-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/onCallDutyPolicy-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/onCallDutyPolicy-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/onCallDutyPolicy-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/onCallDutyPolicy-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/onCallDutyPolicy-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-schedule/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-schedule/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-schedule",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-esclation-rule-schedule/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-esclation-rule-schedule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyEscalationRuleSchedule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-esclation-rule-schedule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatalog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatalogOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatalogOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-dependency/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-dependency/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-dependency",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-dependency/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog-dependency/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatlogDependency(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog-dependency/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-monitor/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-monitor/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-monitor",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-monitor/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog-monitor/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatalogMonitor(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog-monitor/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-telemetry-service/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-telemetry-service/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-telemetry-service",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-catalog-telemetry-service/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-catalog-telemetry-service/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCatalogTelemetryService(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-catalog-telemetry-service/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-code-repository/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-code-repository/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-code-repository",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-code-repository/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/copilot-code-repository/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/copilot-code-repository/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/copilot-action/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteCopilotAction(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/copilot-action/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-copilot-code-repository/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-copilot-code-repository/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-copilot-code-repository",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/service-copilot-code-repository/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/service-copilot-code-repository/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteServiceCopilotCodeRepository(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/service-copilot-code-repository/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listCopilotPullRequest(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-pull-request/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countCopilotPullRequest(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-pull-request/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getCopilotPullRequest(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-pull-request/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action-type-prority/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action-type-prority/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action-type-prority",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/copilot-action-type-prority/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/copilot-action-type-prority/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteCopilotActionType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/copilot-action-type-prority/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-team/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-team/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-team",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-team/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/probe-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteProbeOwnerTeam(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/probe-owner-team/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-user/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-user/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-user",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/probe-owner-user/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/probe-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteProbeOwnerUser(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/probe-owner-user/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listUserTwoFactorAuth(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-two-factor-auth/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countUserTwoFactorAuth(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/user-two-factor-auth/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-ingestion-key/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-ingestion-key/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-ingestion-key",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-ingestion-key/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/telemetry-ingestion-key/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTelemetryIngestionKey(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/telemetry-ingestion-key/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-exception-status/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-exception-status/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-exception-status",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-exception-status/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/telemetry-exception-status/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTelemetryException(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/telemetry-exception-status/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/table-view/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/table-view/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/table-view",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/table-view/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/table-view/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTableView(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/table-view/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/dashboard/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/dashboard/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/dashboard",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/dashboard/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/dashboard/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteDashboard(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/dashboard/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workspace-notification-rule/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workspace-notification-rule/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workspace-notification-rule",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/workspace-notification-rule/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/workspace-notification-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteWorkspaceNotificationRule(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/workspace-notification-rule/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-feed/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-feed/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-feed",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorFeed(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-feed/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metric-type/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metric-type/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metric-type",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metric-type/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/metric-type/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMetricType(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/metric-type/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-time-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-time-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-time-log",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/on-call-duty-policy-time-log/{id}/get-item",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/on-call-duty-policy-time-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteOnCallDutyPolicyTimeLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/on-call-duty-policy-time-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/logs/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/logs/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/logs",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/logs/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/logs/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteLogItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/logs/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/span/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/span/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/span",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/span/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/span/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteSpanItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/span/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metrics/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metrics/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metrics",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/metrics/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/metrics/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMetricItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/metrics/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-attributes/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-attributes/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-attributes",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/telemetry-attributes/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/telemetry-attributes/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteTelemetryAttribute(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/telemetry-attributes/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/exceptions/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/exceptions/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/exceptions",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/exceptions/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/exceptions/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteExceptionItem(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/exceptions/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async listMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-log/get-list",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async countMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-log/count",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async createMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-log",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async getMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "POST",
        path: "/monitor-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async updateMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "PUT",
        path: "/monitor-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }

  private async deleteMonitorLog(args: any): Promise<any> {
    try {
      const response = await this.apiClient.request({
        method: "DELETE",
        path: "/monitor-log/{id}",
        data: args,
      });

      return {
        content: [
          {
            type: "text",
            text: JSON.stringify(response.data, null, 2),
          },
        ],
      };
    } catch (error) {
      throw new Error(`API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
}