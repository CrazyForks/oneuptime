name: Terraform Provider Generation

on:
  pull_request:
  push:
    branches:
      - main
      - master
      - develop
  workflow_dispatch: # Allow manual trigger

jobs:
  generate-terraform-provider:
    runs-on: ubuntu-latest
    env:
      CI_PIPELINE_ID: ${{ github.run_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          cache: 'npm'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: true

      - name: Install Common dependencies
        run: cd Common && npm install

      - name: Install root dependencies
        run: npm install

      - name: Install Script dependencies
        run: cd Scripts && npm install

      - name: Generate Terraform provider
        run: npm run generate-terraform-provider

      - name: Verify provider generation
        run: |
          PROVIDER_DIR="./Terraform"
          
          # Check if provider directory was created
          if [ ! -d "$PROVIDER_DIR" ]; then
            echo "‚ùå Terraform provider directory not created"
            exit 1
          fi
          echo "‚úÖ Provider directory created: $PROVIDER_DIR"
          
          # Count generated files
          GO_FILES=$(find "$PROVIDER_DIR" -name "*.go" | wc -l)
          echo "üìä Generated Go files: $GO_FILES"
          
          if [ "$GO_FILES" -eq 0 ]; then
            echo "‚ùå No Go files were generated"
            exit 1
          fi
          
          # Check for essential files
          if [ -f "$PROVIDER_DIR/go.mod" ]; then
            echo "‚úÖ Go module file created"
          fi
          
          if [ -f "$PROVIDER_DIR/README.md" ]; then
            echo "‚úÖ Documentation created"
          fi
          
          # Show directory structure for debugging
          echo "üìÅ Provider directory structure:"
          ls -la "$PROVIDER_DIR" || true

      - name: Test Go build
        run: |
          PROVIDER_DIR="./Terraform"
          if [ -d "$PROVIDER_DIR" ] && [ -f "$PROVIDER_DIR/go.mod" ]; then
            cd "$PROVIDER_DIR"
            echo "üî® Testing Go build..."
            go mod tidy
            go build -v ./...
            echo "‚úÖ Go build successful"
          else
            echo "‚ö†Ô∏è Cannot test build - missing go.mod or provider directory"
          fi

      - name: Upload Terraform provider as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Terraform
          path: ./Terraform/
          retention-days: 30

      - name: Comment PR with provider info (on PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const providerDir = './Terraform';
            let comment = '## üèóÔ∏è Terraform Provider Generation Results\n\n';
            
            if (fs.existsSync(providerDir)) {
              let goFiles = 0;
              try {
                goFiles = require('child_process')
                  .execSync(`find ${providerDir} -name "*.go" | wc -l`, {encoding: 'utf8'})
                  .trim();
              } catch (e) {
                goFiles = 'Unknown';
              }
              
              const hasGoMod = fs.existsSync(path.join(providerDir, 'go.mod'));
              const hasReadme = fs.existsSync(path.join(providerDir, 'README.md'));
              
              comment += '‚úÖ **Terraform provider generated successfully!**\n\n';
              comment += '**Generation Details:**\n';
              comment += `- üì¶ **Go Files:** ${goFiles}\n`;
              comment += `- üìÑ **Go Module:** ${hasGoMod ? '‚úÖ Created' : '‚ùå Missing'}\n`;
              comment += `- üìö **Documentation:** ${hasReadme ? '‚úÖ Created' : '‚ùå Missing'}\n`;
              comment += `- üìÅ **Output Directory:** \`Terraform/\`\n\n`;
              comment += 'The generated Terraform provider is available as an artifact in this workflow run.\n\n';
              comment += '### Next Steps\n';
              comment += '1. Download the provider artifact\n';
              comment += '2. Test the provider with your Terraform configurations\n';
              comment += '3. Build and install the provider locally\n';
              comment += '4. Publish to the Terraform Registry when ready\n';
            } else {
              comment += '‚ùå **Terraform provider generation failed!**\n\n';
              comment += 'Please check the workflow logs for details.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
